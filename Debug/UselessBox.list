
UselessBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000533c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00075868  080054e0  080054e0  000064e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807ad48  0807ad48  0007c06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0807ad48  0807ad48  0007bd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807ad50  0807ad50  0007c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807ad50  0807ad50  0007bd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0807ad54  0807ad54  0007bd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0807ad58  0007c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000006c  0807adc4  0007c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0807adc4  0007c314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0007c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c998  00000000  00000000  0007c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c91  00000000  00000000  00088a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0008a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009fe  00000000  00000000  0008b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001734d  00000000  00000000  0008bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d696  00000000  00000000  000a30db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe97  00000000  00000000  000b0771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c0  00000000  00000000  0014064c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014480c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054c4 	.word	0x080054c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080054c4 	.word	0x080054c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <UselessBox_StandardRoutine>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UselessBox_StandardRoutine(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	Servo_SweepAngle(LID, 0, LID_MAX_ANGLE, 2); // Open lid
 8000f28:	2302      	movs	r3, #2
 8000f2a:	2223      	movs	r2, #35	@ 0x23
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f8fe 	bl	8001130 <Servo_SweepAngle>
	Servo_SweepAngle(ARM, 0, ARM_MAX_ANGLE, 2); // Swing out arm
 8000f34:	2302      	movs	r3, #2
 8000f36:	22aa      	movs	r2, #170	@ 0xaa
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 f8f8 	bl	8001130 <Servo_SweepAngle>
	HAL_Delay(200);
 8000f40:	20c8      	movs	r0, #200	@ 0xc8
 8000f42:	f001 f923 	bl	800218c <HAL_Delay>
	Servo_SweepAngle(ARM, ARM_MAX_ANGLE, 0, 2); // Return arm
 8000f46:	2302      	movs	r3, #2
 8000f48:	2200      	movs	r2, #0
 8000f4a:	21aa      	movs	r1, #170	@ 0xaa
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f000 f8ef 	bl	8001130 <Servo_SweepAngle>
	Servo_SweepAngle(LID, LID_MAX_ANGLE, 0, 2); // Close lid
 8000f52:	2302      	movs	r3, #2
 8000f54:	2200      	movs	r2, #0
 8000f56:	2123      	movs	r1, #35	@ 0x23
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 f8e9 	bl	8001130 <Servo_SweepAngle>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <UselessBox_AngryRoutine>:

void UselessBox_AngryRoutine(){
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
	Servo_SweepAngle(LID, 0, LID_MAX_ANGLE, 2); // Open lid
 8000f68:	2302      	movs	r3, #2
 8000f6a:	2223      	movs	r2, #35	@ 0x23
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f8de 	bl	8001130 <Servo_SweepAngle>
	Servo_SweepAngle(ARM, 0, ARM_MAX_ANGLE, 2); // Swing out arm
 8000f74:	2302      	movs	r3, #2
 8000f76:	22aa      	movs	r2, #170	@ 0xaa
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f000 f8d8 	bl	8001130 <Servo_SweepAngle>
	for(uint8_t i = 0; i < 7; i++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	e014      	b.n	8000fb0 <UselessBox_AngryRoutine+0x4e>
		Servo_SweepAngle(LID, LID_MAX_ANGLE, 0, 2); // Close lid
 8000f86:	2302      	movs	r3, #2
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2123      	movs	r1, #35	@ 0x23
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f000 f8cf 	bl	8001130 <Servo_SweepAngle>
		HAL_Delay(100);
 8000f92:	2064      	movs	r0, #100	@ 0x64
 8000f94:	f001 f8fa 	bl	800218c <HAL_Delay>
		Servo_SweepAngle(LID, 0, LID_MAX_ANGLE, 2); // Open lid
 8000f98:	2302      	movs	r3, #2
 8000f9a:	2223      	movs	r2, #35	@ 0x23
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f8c6 	bl	8001130 <Servo_SweepAngle>
		HAL_Delay(100);
 8000fa4:	2064      	movs	r0, #100	@ 0x64
 8000fa6:	f001 f8f1 	bl	800218c <HAL_Delay>
	for(uint8_t i = 0; i < 7; i++){
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	3301      	adds	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d9e7      	bls.n	8000f86 <UselessBox_AngryRoutine+0x24>
	}
	HAL_Delay(100);
 8000fb6:	2064      	movs	r0, #100	@ 0x64
 8000fb8:	f001 f8e8 	bl	800218c <HAL_Delay>
	Servo_SweepAngle(ARM, ARM_MAX_ANGLE, 0, 2); // Return arm
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	21aa      	movs	r1, #170	@ 0xaa
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 f8b4 	bl	8001130 <Servo_SweepAngle>
	Servo_SweepAngle(LID, LID_MAX_ANGLE, 0, 2); // Close lid
 8000fc8:	2302      	movs	r3, #2
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2123      	movs	r1, #35	@ 0x23
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f8ae 	bl	8001130 <Servo_SweepAngle>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <UselessBox_WaveringRoutine>:

void UselessBox_WaveringRoutine(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	Servo_SweepAngle(LID, 0, LID_MAX_ANGLE, 10); // Open lid
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	2223      	movs	r2, #35	@ 0x23
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 f8a1 	bl	8001130 <Servo_SweepAngle>
	Servo_SweepAngle(ARM, 0, ARM_MAX_ANGLE-10, 5); // Close wavering point
 8000fee:	2305      	movs	r3, #5
 8000ff0:	22a0      	movs	r2, #160	@ 0xa0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 f89b 	bl	8001130 <Servo_SweepAngle>
	for(uint8_t i = 0; i < 3; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e011      	b.n	8001024 <UselessBox_WaveringRoutine+0x48>
		Servo_SweepAngle(ARM, ARM_MAX_ANGLE-10, ARM_MAX_ANGLE-20, 5); // Far wavering point
 8001000:	2305      	movs	r3, #5
 8001002:	2296      	movs	r2, #150	@ 0x96
 8001004:	21a0      	movs	r1, #160	@ 0xa0
 8001006:	2001      	movs	r0, #1
 8001008:	f000 f892 	bl	8001130 <Servo_SweepAngle>
		HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	@ 0x64
 800100e:	f001 f8bd 	bl	800218c <HAL_Delay>
		Servo_SweepAngle(ARM, ARM_MAX_ANGLE-20, ARM_MAX_ANGLE-10, 5); // Close wavering point
 8001012:	2305      	movs	r3, #5
 8001014:	22a0      	movs	r2, #160	@ 0xa0
 8001016:	2196      	movs	r1, #150	@ 0x96
 8001018:	2001      	movs	r0, #1
 800101a:	f000 f889 	bl	8001130 <Servo_SweepAngle>
	for(uint8_t i = 0; i < 3; i++){
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	3301      	adds	r3, #1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d9ea      	bls.n	8001000 <UselessBox_WaveringRoutine+0x24>
	}
	Servo_SweepAngle(ARM, ARM_MAX_ANGLE-10, 100, 3); // Fake return arm
 800102a:	2303      	movs	r3, #3
 800102c:	2264      	movs	r2, #100	@ 0x64
 800102e:	21a0      	movs	r1, #160	@ 0xa0
 8001030:	2001      	movs	r0, #1
 8001032:	f000 f87d 	bl	8001130 <Servo_SweepAngle>
	HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	@ 0x64
 8001038:	f001 f8a8 	bl	800218c <HAL_Delay>
	Servo_SweepAngle(ARM, 100, ARM_MAX_ANGLE, 3); // Flip switch
 800103c:	2303      	movs	r3, #3
 800103e:	22aa      	movs	r2, #170	@ 0xaa
 8001040:	2164      	movs	r1, #100	@ 0x64
 8001042:	2001      	movs	r0, #1
 8001044:	f000 f874 	bl	8001130 <Servo_SweepAngle>
	HAL_Delay(100);
 8001048:	2064      	movs	r0, #100	@ 0x64
 800104a:	f001 f89f 	bl	800218c <HAL_Delay>
	Servo_SweepAngle(ARM, ARM_MAX_ANGLE, 0, 2); // Return arm
 800104e:	2302      	movs	r3, #2
 8001050:	2200      	movs	r2, #0
 8001052:	21aa      	movs	r1, #170	@ 0xaa
 8001054:	2001      	movs	r0, #1
 8001056:	f000 f86b 	bl	8001130 <Servo_SweepAngle>
	Servo_SweepAngle(LID, LID_MAX_ANGLE, 0, 2); // Close lid
 800105a:	2302      	movs	r3, #2
 800105c:	2200      	movs	r2, #0
 800105e:	2123      	movs	r1, #35	@ 0x23
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f865 	bl	8001130 <Servo_SweepAngle>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <UselessBox_RoutineDecider>:

void UselessBox_RoutineDecider(){
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
	switch(rand()%4){
 8001072:	f003 f913 	bl	800429c <rand>
 8001076:	4603      	mov	r3, r0
 8001078:	425a      	negs	r2, r3
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	bf58      	it	pl
 8001084:	4253      	negpl	r3, r2
 8001086:	2b02      	cmp	r3, #2
 8001088:	d00c      	beq.n	80010a4 <UselessBox_RoutineDecider+0x36>
 800108a:	2b02      	cmp	r3, #2
 800108c:	dc0d      	bgt.n	80010aa <UselessBox_RoutineDecider+0x3c>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <UselessBox_RoutineDecider+0x2a>
 8001092:	2b01      	cmp	r3, #1
 8001094:	d003      	beq.n	800109e <UselessBox_RoutineDecider+0x30>
 8001096:	e008      	b.n	80010aa <UselessBox_RoutineDecider+0x3c>
		case 0:  UselessBox_StandardRoutine(); break;
 8001098:	f7ff ff44 	bl	8000f24 <UselessBox_StandardRoutine>
 800109c:	e008      	b.n	80010b0 <UselessBox_RoutineDecider+0x42>
		case 1:  UselessBox_AngryRoutine();    break;
 800109e:	f7ff ff60 	bl	8000f62 <UselessBox_AngryRoutine>
 80010a2:	e005      	b.n	80010b0 <UselessBox_RoutineDecider+0x42>
		case 2:  UselessBox_WaveringRoutine(); break;
 80010a4:	f7ff ff9a 	bl	8000fdc <UselessBox_WaveringRoutine>
 80010a8:	e002      	b.n	80010b0 <UselessBox_RoutineDecider+0x42>
		default: UselessBox_StandardRoutine();
 80010aa:	f7ff ff3b 	bl	8000f24 <UselessBox_StandardRoutine>
	}
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <Servo_SetAngle>:

uint32_t Servo_SetAngle(ServoID id, uint8_t angle){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	460a      	mov	r2, r1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	4613      	mov	r3, r2
 80010c2:	71bb      	strb	r3, [r7, #6]
	uint32_t pulse_width = Servo_CalculatePulseWidth(angle);
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f818 	bl	80010fc <Servo_CalculatePulseWidth>
 80010cc:	60f8      	str	r0, [r7, #12]
	switch(id){
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <Servo_SetAngle+0x26>
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d005      	beq.n	80010e4 <Servo_SetAngle+0x30>
		case LID: htim2.Instance->CCR1 = pulse_width; break;
		case ARM: htim2.Instance->CCR2 = pulse_width; break;
		default:  break;
 80010d8:	e009      	b.n	80010ee <Servo_SetAngle+0x3a>
		case LID: htim2.Instance->CCR1 = pulse_width; break;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <Servo_SetAngle+0x44>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e2:	e004      	b.n	80010ee <Servo_SetAngle+0x3a>
		case ARM: htim2.Instance->CCR2 = pulse_width; break;
 80010e4:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <Servo_SetAngle+0x44>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80010ec:	bf00      	nop
	}

	return pulse_width;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000088 	.word	0x20000088

080010fc <Servo_CalculatePulseWidth>:

uint32_t Servo_CalculatePulseWidth(uint8_t angle){
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	return MIN_SERVO_PW + (((MAX_SERVO_PW - MIN_SERVO_PW) * angle)/MAX_ROTATION_DEGREES);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	4a06      	ldr	r2, [pc, #24]	@ (800112c <Servo_CalculatePulseWidth+0x30>)
 8001112:	fb82 1203 	smull	r1, r2, r2, r3
 8001116:	441a      	add	r2, r3
 8001118:	11d2      	asrs	r2, r2, #7
 800111a:	17db      	asrs	r3, r3, #31
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	33fa      	adds	r3, #250	@ 0xfa
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	b60b60b7 	.word	0xb60b60b7

08001130 <Servo_SweepAngle>:

void Servo_SweepAngle(ServoID id, uint8_t angle1, uint8_t angle2, uint32_t delay_ms) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	460b      	mov	r3, r1
 800113e:	71bb      	strb	r3, [r7, #6]
 8001140:	4613      	mov	r3, r2
 8001142:	717b      	strb	r3, [r7, #5]
	// Time in ms it takes to execute this function = abs(angle1-angle2)*delay_ms
    if (angle1 > 180) angle1 = 180;
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	2bb4      	cmp	r3, #180	@ 0xb4
 8001148:	d901      	bls.n	800114e <Servo_SweepAngle+0x1e>
 800114a:	23b4      	movs	r3, #180	@ 0xb4
 800114c:	71bb      	strb	r3, [r7, #6]
    if (angle2 > 180) angle2 = 180;
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	2bb4      	cmp	r3, #180	@ 0xb4
 8001152:	d901      	bls.n	8001158 <Servo_SweepAngle+0x28>
 8001154:	23b4      	movs	r3, #180	@ 0xb4
 8001156:	717b      	strb	r3, [r7, #5]

    if (angle1 == angle2) return;
 8001158:	79ba      	ldrb	r2, [r7, #6]
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	429a      	cmp	r2, r3
 800115e:	d021      	beq.n	80011a4 <Servo_SweepAngle+0x74>

    int8_t sign = (angle1 < angle2) ? 1 : -1;
 8001160:	79ba      	ldrb	r2, [r7, #6]
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	429a      	cmp	r2, r3
 8001166:	d201      	bcs.n	800116c <Servo_SweepAngle+0x3c>
 8001168:	2301      	movs	r3, #1
 800116a:	e001      	b.n	8001170 <Servo_SweepAngle+0x40>
 800116c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001170:	73fb      	strb	r3, [r7, #15]

    while (angle1 != angle2) {
 8001172:	e00c      	b.n	800118e <Servo_SweepAngle+0x5e>
        Servo_SetAngle(id, angle1);
 8001174:	79ba      	ldrb	r2, [r7, #6]
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff9a 	bl	80010b4 <Servo_SetAngle>
        HAL_Delay(delay_ms);
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f001 f803 	bl	800218c <HAL_Delay>
        angle1 += sign;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	4413      	add	r3, r2
 800118c:	71bb      	strb	r3, [r7, #6]
    while (angle1 != angle2) {
 800118e:	79ba      	ldrb	r2, [r7, #6]
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	429a      	cmp	r2, r3
 8001194:	d1ee      	bne.n	8001174 <Servo_SweepAngle+0x44>
    }

    // Ensure the servo reaches the final position
    Servo_SetAngle(id, angle2);
 8001196:	797a      	ldrb	r2, [r7, #5]
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff89 	bl	80010b4 <Servo_SetAngle>
 80011a2:	e000      	b.n	80011a6 <Servo_SweepAngle+0x76>
    if (angle1 == angle2) return;
 80011a4:	bf00      	nop
}
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Speaker_OutputSample>:

void Speaker_OutputSample(uint8_t freq){
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	 htim4.Instance->CCR1 = freq;
 80011b6:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <Speaker_OutputSample+0x20>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000118 	.word	0x20000118

080011d0 <Speaker_DWT_Init>:

void Speaker_DWT_Init(void){
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enables DWT unit
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <Speaker_DWT_Init+0x2c>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <Speaker_DWT_Init+0x2c>)
 80011da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011de:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0; // Clears DWT counter
 80011e0:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <Speaker_DWT_Init+0x30>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Starts it counting
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <Speaker_DWT_Init+0x30>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <Speaker_DWT_Init+0x30>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6013      	str	r3, [r2, #0]
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000edf0 	.word	0xe000edf0
 8001200:	e0001000 	.word	0xe0001000

08001204 <Speaker_DWTDelay_us>:

void Speaker_DWTDelay_us(uint32_t us_delay){
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    uint32_t cycles = us_delay * (SystemCoreClock / 1000000); // Cycles per microsecond (84MHz/1,000,000) = 84 cycles per us
 800120c:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <Speaker_DWTDelay_us+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <Speaker_DWTDelay_us+0x44>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0c9a      	lsrs	r2, r3, #18
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;                             // Current cycle count
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <Speaker_DWTDelay_us+0x48>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);                   // Busy-wait until specified cycles have passed
 8001226:	bf00      	nop
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <Speaker_DWTDelay_us+0x48>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	429a      	cmp	r2, r3
 8001234:	d8f8      	bhi.n	8001228 <Speaker_DWTDelay_us+0x24>
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	20000004 	.word	0x20000004
 8001248:	431bde83 	.word	0x431bde83
 800124c:	e0001000 	.word	0xe0001000

08001250 <LED_SetColor>:

void LED_SetColor(uint8_t red, uint8_t green, uint8_t blue){
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	717b      	strb	r3, [r7, #5]
	htim3.Instance->CCR1 = red;
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <LED_SetColor+0x38>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2 = green;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <LED_SetColor+0x38>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	79ba      	ldrb	r2, [r7, #6]
 8001270:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3 = blue;
 8001272:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <LED_SetColor+0x38>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	797a      	ldrb	r2, [r7, #5]
 8001278:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200000d0 	.word	0x200000d0
 800128c:	00000000 	.word	0x00000000

08001290 <HSV_to_RGB>:

void HSV_to_RGB(uint16_t H, uint16_t *R, uint16_t *G, uint16_t *B) {
 8001290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001294:	b08c      	sub	sp, #48	@ 0x30
 8001296:	af00      	add	r7, sp, #0
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4603      	mov	r3, r0
 80012a0:	81fb      	strh	r3, [r7, #14]
//	https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB
	float S = 1, V = 1;
 80012a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012a6:	623b      	str	r3, [r7, #32]
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012ac:	61fb      	str	r3, [r7, #28]
    float C = V * S;
 80012ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80012b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ba:	edc7 7a06 	vstr	s15, [r7, #24]
    float X = C * (1 - fabs(fmod(H / 60.0, 2) - 1));
 80012be:	69b8      	ldr	r0, [r7, #24]
 80012c0:	f7ff f942 	bl	8000548 <__aeabi_f2d>
 80012c4:	4680      	mov	r8, r0
 80012c6:	4689      	mov	r9, r1
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f92a 	bl	8000524 <__aeabi_i2d>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b60      	ldr	r3, [pc, #384]	@ (8001458 <HSV_to_RGB+0x1c8>)
 80012d6:	f7ff fab9 	bl	800084c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	ec43 2b17 	vmov	d7, r2, r3
 80012e2:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8001450 <HSV_to_RGB+0x1c0>
 80012e6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ea:	eef0 0a67 	vmov.f32	s1, s15
 80012ee:	f003 ffb3 	bl	8005258 <fmod>
 80012f2:	ec51 0b10 	vmov	r0, r1, d0
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b58      	ldr	r3, [pc, #352]	@ (800145c <HSV_to_RGB+0x1cc>)
 80012fc:	f7fe ffc4 	bl	8000288 <__aeabi_dsub>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4614      	mov	r4, r2
 8001306:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800130a:	4622      	mov	r2, r4
 800130c:	462b      	mov	r3, r5
 800130e:	f04f 0000 	mov.w	r0, #0
 8001312:	4952      	ldr	r1, [pc, #328]	@ (800145c <HSV_to_RGB+0x1cc>)
 8001314:	f7fe ffb8 	bl	8000288 <__aeabi_dsub>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4640      	mov	r0, r8
 800131e:	4649      	mov	r1, r9
 8001320:	f7ff f96a 	bl	80005f8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc14 	bl	8000b58 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	617b      	str	r3, [r7, #20]
    float m = V - C;
 8001334:	ed97 7a07 	vldr	s14, [r7, #28]
 8001338:	edd7 7a06 	vldr	s15, [r7, #24]
 800133c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001340:	edc7 7a04 	vstr	s15, [r7, #16]

    float r, g, b;
    if      (H >= 0   && H <  60) r = C, g = X, b = 0;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	2b3b      	cmp	r3, #59	@ 0x3b
 8001348:	d807      	bhi.n	800135a <HSV_to_RGB+0xca>
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
 8001358:	e03f      	b.n	80013da <HSV_to_RGB+0x14a>
    else if (H >= 60  && H < 120) r = X, g = C, b = 0;
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	2b3b      	cmp	r3, #59	@ 0x3b
 800135e:	d90a      	bls.n	8001376 <HSV_to_RGB+0xe6>
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	2b77      	cmp	r3, #119	@ 0x77
 8001364:	d807      	bhi.n	8001376 <HSV_to_RGB+0xe6>
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
 8001374:	e031      	b.n	80013da <HSV_to_RGB+0x14a>
    else if (H >= 120 && H < 180) r = 0, g = C, b = X;
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	2b77      	cmp	r3, #119	@ 0x77
 800137a:	d90a      	bls.n	8001392 <HSV_to_RGB+0x102>
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	2bb3      	cmp	r3, #179	@ 0xb3
 8001380:	d807      	bhi.n	8001392 <HSV_to_RGB+0x102>
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001390:	e023      	b.n	80013da <HSV_to_RGB+0x14a>
    else if (H >= 180 && H < 240) r = 0, g = X, b = C;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	2bb3      	cmp	r3, #179	@ 0xb3
 8001396:	d90a      	bls.n	80013ae <HSV_to_RGB+0x11e>
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	2bef      	cmp	r3, #239	@ 0xef
 800139c:	d807      	bhi.n	80013ae <HSV_to_RGB+0x11e>
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ac:	e015      	b.n	80013da <HSV_to_RGB+0x14a>
    else if (H >= 240 && H < 300) r = X, g = 0, b = C;
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	2bef      	cmp	r3, #239	@ 0xef
 80013b2:	d90b      	bls.n	80013cc <HSV_to_RGB+0x13c>
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80013ba:	d207      	bcs.n	80013cc <HSV_to_RGB+0x13c>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ca:	e006      	b.n	80013da <HSV_to_RGB+0x14a>
    else                          r = C, g = 0, b = X;
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24

    // Convert to 8-bit RGB
    *R = (int)((r + m) * 255);
 80013da:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013de:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001460 <HSV_to_RGB+0x1d0>
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f2:	ee17 3a90 	vmov	r3, s15
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	801a      	strh	r2, [r3, #0]
    *G = (int)((g + m) * 255);
 80013fc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001400:	edd7 7a04 	vldr	s15, [r7, #16]
 8001404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001408:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001460 <HSV_to_RGB+0x1d0>
 800140c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001414:	ee17 3a90 	vmov	r3, s15
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	801a      	strh	r2, [r3, #0]
    *B = (int)((b + m) * 255);
 800141e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001422:	edd7 7a04 	vldr	s15, [r7, #16]
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001460 <HSV_to_RGB+0x1d0>
 800142e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001436:	ee17 3a90 	vmov	r3, s15
 800143a:	b29a      	uxth	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	801a      	strh	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	3730      	adds	r7, #48	@ 0x30
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	00000000 	.word	0x00000000
 8001454:	40000000 	.word	0x40000000
 8001458:	404e0000 	.word	0x404e0000
 800145c:	3ff00000 	.word	0x3ff00000
 8001460:	437f0000 	.word	0x437f0000

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001468:	f000 fe1e 	bl	80020a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 f8ac 	bl	80015c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f000 fac2 	bl	80019f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001474:	f000 fa96 	bl	80019a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001478:	f000 f912 	bl	80016a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800147c:	f000 f990 	bl	80017a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001480:	f000 fa1a 	bl	80018b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* INIT SERVOS */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Lid servo
 8001484:	2100      	movs	r1, #0
 8001486:	4842      	ldr	r0, [pc, #264]	@ (8001590 <main+0x12c>)
 8001488:	f001 fec4 	bl	8003214 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Arm servo
 800148c:	2104      	movs	r1, #4
 800148e:	4840      	ldr	r0, [pc, #256]	@ (8001590 <main+0x12c>)
 8001490:	f001 fec0 	bl	8003214 <HAL_TIM_PWM_Start>

  /* INIT RGB LED */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Red channel
 8001494:	2100      	movs	r1, #0
 8001496:	483f      	ldr	r0, [pc, #252]	@ (8001594 <main+0x130>)
 8001498:	f001 febc 	bl	8003214 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Green channel
 800149c:	2104      	movs	r1, #4
 800149e:	483d      	ldr	r0, [pc, #244]	@ (8001594 <main+0x130>)
 80014a0:	f001 feb8 	bl	8003214 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Blue channel
 80014a4:	2108      	movs	r1, #8
 80014a6:	483b      	ldr	r0, [pc, #236]	@ (8001594 <main+0x130>)
 80014a8:	f001 feb4 	bl	8003214 <HAL_TIM_PWM_Start>

  /* INIT SPEAKER CONTROL */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Speaker control
 80014ac:	2100      	movs	r1, #0
 80014ae:	483a      	ldr	r0, [pc, #232]	@ (8001598 <main+0x134>)
 80014b0:	f001 feb0 	bl	8003214 <HAL_TIM_PWM_Start>
  Speaker_DWT_Init();                       // 125us delay, 8Khz audio playback
 80014b4:	f7ff fe8c 	bl	80011d0 <Speaker_DWT_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Servo_SetAngle(LID, 0);
 80014b8:	2100      	movs	r1, #0
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff fdfa 	bl	80010b4 <Servo_SetAngle>
  Servo_SetAngle(ARM, 0);
 80014c0:	2100      	movs	r1, #0
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fdf6 	bl	80010b4 <Servo_SetAngle>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(movement_requested){
 80014c8:	4b34      	ldr	r3, [pc, #208]	@ (800159c <main+0x138>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d010      	beq.n	80014f4 <main+0x90>
		  Speaker_OutputSample(0); // Turn off speaker
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fe6a 	bl	80011ac <Speaker_OutputSample>
		  HAL_Delay(100);          // Maybe remove this
 80014d8:	2064      	movs	r0, #100	@ 0x64
 80014da:	f000 fe57 	bl	800218c <HAL_Delay>
		  LED_SetColor(0, 0, 0);  // Turn off lights
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff feb4 	bl	8001250 <LED_SetColor>
		  UselessBox_RoutineDecider();
 80014e8:	f7ff fdc1 	bl	800106e <UselessBox_RoutineDecider>
		  movement_requested = 0;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <main+0x138>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e7e9      	b.n	80014c8 <main+0x64>
	  } else {
		  // RGB Cycling
		  if((hue_update_counter++) % 50 == 0) {
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <main+0x13c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c53      	adds	r3, r2, #1
 80014fa:	4929      	ldr	r1, [pc, #164]	@ (80015a0 <main+0x13c>)
 80014fc:	600b      	str	r3, [r1, #0]
 80014fe:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <main+0x140>)
 8001500:	fba3 1302 	umull	r1, r3, r3, r2
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	2132      	movs	r1, #50	@ 0x32
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d114      	bne.n	800153c <main+0xd8>
			  H = (H + 1) % 360; // Tweak cycle_speed if necessary. Only increment H every 50 iterations
 8001512:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <main+0x144>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a24      	ldr	r2, [pc, #144]	@ (80015ac <main+0x148>)
 800151a:	fb82 1203 	smull	r1, r2, r2, r3
 800151e:	441a      	add	r2, r3
 8001520:	1211      	asrs	r1, r2, #8
 8001522:	17da      	asrs	r2, r3, #31
 8001524:	1a8a      	subs	r2, r1, r2
 8001526:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800152a:	fb01 f202 	mul.w	r2, r1, r2
 800152e:	1a9a      	subs	r2, r3, r2
 8001530:	b292      	uxth	r2, r2
 8001532:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <main+0x144>)
 8001534:	801a      	strh	r2, [r3, #0]
			  hue_update_counter = 1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <main+0x13c>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
		  }
		  HSV_to_RGB(H, &R, &G, &B);
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <main+0x144>)
 800153e:	8818      	ldrh	r0, [r3, #0]
 8001540:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <main+0x14c>)
 8001542:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <main+0x150>)
 8001544:	491c      	ldr	r1, [pc, #112]	@ (80015b8 <main+0x154>)
 8001546:	f7ff fea3 	bl	8001290 <HSV_to_RGB>
		  LED_SetColor(R,G,B);
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <main+0x154>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <main+0x150>)
 8001552:	8812      	ldrh	r2, [r2, #0]
 8001554:	b2d1      	uxtb	r1, r2
 8001556:	4a16      	ldr	r2, [pc, #88]	@ (80015b0 <main+0x14c>)
 8001558:	8812      	ldrh	r2, [r2, #0]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe77 	bl	8001250 <LED_SetColor>

		  // Speaker audio playback
		  Speaker_OutputSample(trapqueencut_wav[audio_sample_index++]);
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <main+0x158>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	4914      	ldr	r1, [pc, #80]	@ (80015bc <main+0x158>)
 800156a:	600a      	str	r2, [r1, #0]
 800156c:	4a14      	ldr	r2, [pc, #80]	@ (80015c0 <main+0x15c>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe1b 	bl	80011ac <Speaker_OutputSample>
		  if(audio_sample_index > trapqueencut_wav_len) audio_sample_index = AUDIO_SAMPLE_RESET_INDEX;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <main+0x158>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <main+0x160>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d902      	bls.n	8001586 <main+0x122>
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <main+0x158>)
 8001582:	222c      	movs	r2, #44	@ 0x2c
 8001584:	601a      	str	r2, [r3, #0]
		  Speaker_DWTDelay_us(SPEAKER_SAMPLE_DELAY_US); // Should be 125us, but its too pitched down. Plays audio at 8000hz, which is how I encoded the WAV file
 8001586:	206a      	movs	r0, #106	@ 0x6a
 8001588:	f7ff fe3c 	bl	8001204 <Speaker_DWTDelay_us>
	  if(movement_requested){
 800158c:	e79c      	b.n	80014c8 <main+0x64>
 800158e:	bf00      	nop
 8001590:	20000088 	.word	0x20000088
 8001594:	200000d0 	.word	0x200000d0
 8001598:	20000118 	.word	0x20000118
 800159c:	200001a8 	.word	0x200001a8
 80015a0:	200001bc 	.word	0x200001bc
 80015a4:	51eb851f 	.word	0x51eb851f
 80015a8:	200001ba 	.word	0x200001ba
 80015ac:	b60b60b7 	.word	0xb60b60b7
 80015b0:	200001b8 	.word	0x200001b8
 80015b4:	200001b6 	.word	0x200001b6
 80015b8:	200001b4 	.word	0x200001b4
 80015bc:	20000000 	.word	0x20000000
 80015c0:	080054e0 	.word	0x080054e0
 80015c4:	00075568 	.word	0x00075568

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	@ 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2230      	movs	r2, #48	@ 0x30
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 ff60 	bl	800449c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <SystemClock_Config+0xd0>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	4a28      	ldr	r2, [pc, #160]	@ (8001698 <SystemClock_Config+0xd0>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <SystemClock_Config+0xd0>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	4b23      	ldr	r3, [pc, #140]	@ (800169c <SystemClock_Config+0xd4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001614:	4a21      	ldr	r2, [pc, #132]	@ (800169c <SystemClock_Config+0xd4>)
 8001616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <SystemClock_Config+0xd4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162c:	2301      	movs	r3, #1
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001630:	2310      	movs	r3, #16
 8001632:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001634:	2302      	movs	r3, #2
 8001636:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001638:	2300      	movs	r3, #0
 800163a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800163c:	2310      	movs	r3, #16
 800163e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001640:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001646:	2304      	movs	r3, #4
 8001648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800164a:	2307      	movs	r3, #7
 800164c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	4618      	mov	r0, r3
 8001654:	f001 f89e 	bl	8002794 <HAL_RCC_OscConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800165e:	f000 fa83 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	230f      	movs	r3, #15
 8001664:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001666:	2302      	movs	r3, #2
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2102      	movs	r1, #2
 800167e:	4618      	mov	r0, r3
 8001680:	f001 fb00 	bl	8002c84 <HAL_RCC_ClockConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800168a:	f000 fa6d 	bl	8001b68 <Error_Handler>
  }
}
 800168e:	bf00      	nop
 8001690:	3750      	adds	r7, #80	@ 0x50
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000

080016a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	@ 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  // Remember, Prescaler is 200-1 and Period is 8400-1.
  // Period gets changed when IOC generates code for some reason
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d0:	4b32      	ldr	r3, [pc, #200]	@ (800179c <MX_TIM2_Init+0xfc>)
 80016d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 80016d8:	4b30      	ldr	r3, [pc, #192]	@ (800179c <MX_TIM2_Init+0xfc>)
 80016da:	22a7      	movs	r2, #167	@ 0xa7
 80016dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b2f      	ldr	r3, [pc, #188]	@ (800179c <MX_TIM2_Init+0xfc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <MX_TIM2_Init+0xfc>)
 80016e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ec:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <MX_TIM2_Init+0xfc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b2a      	ldr	r3, [pc, #168]	@ (800179c <MX_TIM2_Init+0xfc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f8:	4828      	ldr	r0, [pc, #160]	@ (800179c <MX_TIM2_Init+0xfc>)
 80016fa:	f001 fce3 	bl	80030c4 <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001704:	f000 fa30 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001712:	4619      	mov	r1, r3
 8001714:	4821      	ldr	r0, [pc, #132]	@ (800179c <MX_TIM2_Init+0xfc>)
 8001716:	f001 feef 	bl	80034f8 <HAL_TIM_ConfigClockSource>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001720:	f000 fa22 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001724:	481d      	ldr	r0, [pc, #116]	@ (800179c <MX_TIM2_Init+0xfc>)
 8001726:	f001 fd1c 	bl	8003162 <HAL_TIM_PWM_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001730:	f000 fa1a 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173c:	f107 0320 	add.w	r3, r7, #32
 8001740:	4619      	mov	r1, r3
 8001742:	4816      	ldr	r0, [pc, #88]	@ (800179c <MX_TIM2_Init+0xfc>)
 8001744:	f002 fa78 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800174e:	f000 fa0b 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001752:	2360      	movs	r3, #96	@ 0x60
 8001754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <MX_TIM2_Init+0xfc>)
 800176a:	f001 fe03 	bl	8003374 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001774:	f000 f9f8 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2204      	movs	r2, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4807      	ldr	r0, [pc, #28]	@ (800179c <MX_TIM2_Init+0xfc>)
 8001780:	f001 fdf8 	bl	8003374 <HAL_TIM_PWM_ConfigChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800178a:	f000 f9ed 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800178e:	4803      	ldr	r0, [pc, #12]	@ (800179c <MX_TIM2_Init+0xfc>)
 8001790:	f000 fa64 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 8001794:	bf00      	nop
 8001796:	3738      	adds	r7, #56	@ 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000088 	.word	0x20000088

080017a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	@ 0x38
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d0:	4b37      	ldr	r3, [pc, #220]	@ (80018b0 <MX_TIM3_Init+0x110>)
 80017d2:	4a38      	ldr	r2, [pc, #224]	@ (80018b4 <MX_TIM3_Init+0x114>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80;
 80017d6:	4b36      	ldr	r3, [pc, #216]	@ (80018b0 <MX_TIM3_Init+0x110>)
 80017d8:	2250      	movs	r2, #80	@ 0x50
 80017da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <MX_TIM3_Init+0x110>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80017e2:	4b33      	ldr	r3, [pc, #204]	@ (80018b0 <MX_TIM3_Init+0x110>)
 80017e4:	22ff      	movs	r2, #255	@ 0xff
 80017e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <MX_TIM3_Init+0x110>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <MX_TIM3_Init+0x110>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017f4:	482e      	ldr	r0, [pc, #184]	@ (80018b0 <MX_TIM3_Init+0x110>)
 80017f6:	f001 fc65 	bl	80030c4 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001800:	f000 f9b2 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800180e:	4619      	mov	r1, r3
 8001810:	4827      	ldr	r0, [pc, #156]	@ (80018b0 <MX_TIM3_Init+0x110>)
 8001812:	f001 fe71 	bl	80034f8 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800181c:	f000 f9a4 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001820:	4823      	ldr	r0, [pc, #140]	@ (80018b0 <MX_TIM3_Init+0x110>)
 8001822:	f001 fc9e 	bl	8003162 <HAL_TIM_PWM_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800182c:	f000 f99c 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	4619      	mov	r1, r3
 800183e:	481c      	ldr	r0, [pc, #112]	@ (80018b0 <MX_TIM3_Init+0x110>)
 8001840:	f002 f9fa 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800184a:	f000 f98d 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184e:	2360      	movs	r3, #96	@ 0x60
 8001850:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	4812      	ldr	r0, [pc, #72]	@ (80018b0 <MX_TIM3_Init+0x110>)
 8001866:	f001 fd85 	bl	8003374 <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001870:	f000 f97a 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2204      	movs	r2, #4
 8001878:	4619      	mov	r1, r3
 800187a:	480d      	ldr	r0, [pc, #52]	@ (80018b0 <MX_TIM3_Init+0x110>)
 800187c:	f001 fd7a 	bl	8003374 <HAL_TIM_PWM_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001886:	f000 f96f 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2208      	movs	r2, #8
 800188e:	4619      	mov	r1, r3
 8001890:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <MX_TIM3_Init+0x110>)
 8001892:	f001 fd6f 	bl	8003374 <HAL_TIM_PWM_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 800189c:	f000 f964 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018a0:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <MX_TIM3_Init+0x110>)
 80018a2:	f000 f9db 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 80018a6:	bf00      	nop
 80018a8:	3738      	adds	r7, #56	@ 0x38
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200000d0 	.word	0x200000d0
 80018b4:	40000400 	.word	0x40000400

080018b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018e8:	4b2c      	ldr	r3, [pc, #176]	@ (800199c <MX_TIM4_Init+0xe4>)
 80018ea:	4a2d      	ldr	r2, [pc, #180]	@ (80019a0 <MX_TIM4_Init+0xe8>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018ee:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <MX_TIM4_Init+0xe4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b29      	ldr	r3, [pc, #164]	@ (800199c <MX_TIM4_Init+0xe4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80018fa:	4b28      	ldr	r3, [pc, #160]	@ (800199c <MX_TIM4_Init+0xe4>)
 80018fc:	22ff      	movs	r2, #255	@ 0xff
 80018fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b26      	ldr	r3, [pc, #152]	@ (800199c <MX_TIM4_Init+0xe4>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b25      	ldr	r3, [pc, #148]	@ (800199c <MX_TIM4_Init+0xe4>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800190c:	4823      	ldr	r0, [pc, #140]	@ (800199c <MX_TIM4_Init+0xe4>)
 800190e:	f001 fbd9 	bl	80030c4 <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001918:	f000 f926 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001926:	4619      	mov	r1, r3
 8001928:	481c      	ldr	r0, [pc, #112]	@ (800199c <MX_TIM4_Init+0xe4>)
 800192a:	f001 fde5 	bl	80034f8 <HAL_TIM_ConfigClockSource>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001934:	f000 f918 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001938:	4818      	ldr	r0, [pc, #96]	@ (800199c <MX_TIM4_Init+0xe4>)
 800193a:	f001 fc12 	bl	8003162 <HAL_TIM_PWM_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001944:	f000 f910 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4619      	mov	r1, r3
 8001956:	4811      	ldr	r0, [pc, #68]	@ (800199c <MX_TIM4_Init+0xe4>)
 8001958:	f002 f96e 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001962:	f000 f901 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001966:	2360      	movs	r3, #96	@ 0x60
 8001968:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	4807      	ldr	r0, [pc, #28]	@ (800199c <MX_TIM4_Init+0xe4>)
 800197e:	f001 fcf9 	bl	8003374 <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001988:	f000 f8ee 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <MX_TIM4_Init+0xe4>)
 800198e:	f000 f965 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 8001992:	bf00      	nop
 8001994:	3738      	adds	r7, #56	@ 0x38
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000118 	.word	0x20000118
 80019a0:	40000800 	.word	0x40000800

080019a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <MX_USART2_UART_Init+0x50>)
 80019ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019dc:	f002 f99a 	bl	8003d14 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019e6:	f000 f8bf 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000160 	.word	0x20000160
 80019f4:	40004400 	.word	0x40004400

080019f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a37      	ldr	r2, [pc, #220]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a30      	ldr	r2, [pc, #192]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a29      	ldr	r2, [pc, #164]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <MX_GPIO_Init+0xfc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2120      	movs	r1, #32
 8001a82:	481d      	ldr	r0, [pc, #116]	@ (8001af8 <MX_GPIO_Init+0x100>)
 8001a84:	f000 fe54 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4817      	ldr	r0, [pc, #92]	@ (8001afc <MX_GPIO_Init+0x104>)
 8001aa0:	f000 fcaa 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480f      	ldr	r0, [pc, #60]	@ (8001af8 <MX_GPIO_Init+0x100>)
 8001abc:	f000 fc9c 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4808      	ldr	r0, [pc, #32]	@ (8001af8 <MX_GPIO_Init+0x100>)
 8001ad8:	f000 fc8e 	bl	80023f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2017      	movs	r0, #23
 8001ae2:	f000 fc52 	bl	800238a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ae6:	2017      	movs	r0, #23
 8001ae8:	f000 fc6b 	bl	80023c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	@ 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020800 	.word	0x40020800

08001b00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]


  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if(GPIO_Pin != GPIO_PIN_8) return;
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b10:	d11b      	bne.n	8001b4a <HAL_GPIO_EXTI_Callback+0x4a>

  current_time = HAL_GetTick();
 8001b12:	f000 fb2f 	bl	8002174 <HAL_GetTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a0f      	ldr	r2, [pc, #60]	@ (8001b58 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b1a:	6013      	str	r3, [r2, #0]

  if (current_time - previous_time < DEBOUNCE_TIME_MS) return; // Debounce check: Ignore if the debounce time hasn't passed
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b63      	cmp	r3, #99	@ 0x63
 8001b28:	d911      	bls.n	8001b4e <HAL_GPIO_EXTI_Callback+0x4e>

  // Remember, with the pull-up resistor, switch OFF = High, ON = Low
  // If the switch is ON (GPIO_PIN_RESET, which means Low), request servo movement
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 8001b2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b2e:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b30:	f000 fde6 	bl	8002700 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10a      	bne.n	8001b50 <HAL_GPIO_EXTI_Callback+0x50>
	  previous_time = current_time;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b40:	6013      	str	r3, [r2, #0]
	  movement_requested = 1;  // Trigger servo movement
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_EXTI_Callback+0x50>
  if(GPIO_Pin != GPIO_PIN_8) return;
 8001b4a:	bf00      	nop
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_EXTI_Callback+0x50>
  if (current_time - previous_time < DEBOUNCE_TIME_MS) return; // Debounce check: Ignore if the debounce time hasn't passed
 8001b4e:	bf00      	nop
  }



}
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200001ac 	.word	0x200001ac
 8001b5c:	200001b0 	.word	0x200001b0
 8001b60:	40020000 	.word	0x40020000
 8001b64:	200001a8 	.word	0x200001a8

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <Error_Handler+0x8>

08001b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bf2:	e026      	b.n	8001c42 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a16      	ldr	r2, [pc, #88]	@ (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10e      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
}
 8001c1a:	e012      	b.n	8001c42 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <HAL_TIM_Base_MspInit+0x94>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10d      	bne.n	8001c42 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	4a08      	ldr	r2, [pc, #32]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800

08001c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	@ 0x30
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7c:	d11e      	bne.n	8001cbc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a42      	ldr	r2, [pc, #264]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b40      	ldr	r3, [pc, #256]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001caa:	2301      	movs	r3, #1
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4837      	ldr	r0, [pc, #220]	@ (8001d94 <HAL_TIM_MspPostInit+0x138>)
 8001cb6:	f000 fb9f 	bl	80023f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cba:	e064      	b.n	8001d86 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a35      	ldr	r2, [pc, #212]	@ (8001d98 <HAL_TIM_MspPostInit+0x13c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d13c      	bne.n	8001d40 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4b31      	ldr	r3, [pc, #196]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a30      	ldr	r2, [pc, #192]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a29      	ldr	r2, [pc, #164]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cfe:	23c0      	movs	r3, #192	@ 0xc0
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	481e      	ldr	r0, [pc, #120]	@ (8001d94 <HAL_TIM_MspPostInit+0x138>)
 8001d1a:	f000 fb6d 	bl	80023f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4818      	ldr	r0, [pc, #96]	@ (8001d9c <HAL_TIM_MspPostInit+0x140>)
 8001d3a:	f000 fb5d 	bl	80023f8 <HAL_GPIO_Init>
}
 8001d3e:	e022      	b.n	8001d86 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <HAL_TIM_MspPostInit+0x144>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d11d      	bne.n	8001d86 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_TIM_MspPostInit+0x134>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d66:	2340      	movs	r3, #64	@ 0x40
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d76:	2302      	movs	r3, #2
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4806      	ldr	r0, [pc, #24]	@ (8001d9c <HAL_TIM_MspPostInit+0x140>)
 8001d82:	f000 fb39 	bl	80023f8 <HAL_GPIO_Init>
}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	@ 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40000800 	.word	0x40000800

08001da4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <HAL_UART_MspInit+0x84>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12b      	bne.n	8001e1e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a17      	ldr	r2, [pc, #92]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dfe:	230c      	movs	r3, #12
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0e:	2307      	movs	r3, #7
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <HAL_UART_MspInit+0x8c>)
 8001e1a:	f000 faed 	bl	80023f8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	@ 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40004400 	.word	0x40004400
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020000 	.word	0x40020000

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <NMI_Handler+0x4>

08001e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8a:	f000 f95f 	bl	800214c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001e96:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e9a:	f000 fc63 	bl	8002764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  return 1;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_kill>:

int _kill(int pid, int sig)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ebc:	f002 faf6 	bl	80044ac <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2216      	movs	r2, #22
 8001ec4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_exit>:

void _exit (int status)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eda:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffe7 	bl	8001eb2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <_exit+0x12>

08001ee8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e00a      	b.n	8001f10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001efa:	f3af 8000 	nop.w
 8001efe:	4601      	mov	r1, r0
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbf0      	blt.n	8001efa <_read+0x12>
  }

  return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e009      	b.n	8001f48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	60ba      	str	r2, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dbf1      	blt.n	8001f34 <_write+0x12>
  }
  return len;
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_close>:

int _close(int file)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f82:	605a      	str	r2, [r3, #4]
  return 0;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <_isatty>:

int _isatty(int file)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fcc:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <_sbrk+0x5c>)
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <_sbrk+0x60>)
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <_sbrk+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	@ (800202c <_sbrk+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff4:	f002 fa5a 	bl	80044ac <__errno>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002002:	e009      	b.n	8002018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <_sbrk+0x64>)
 8002014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002016:	68fb      	ldr	r3, [r7, #12]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20018000 	.word	0x20018000
 8002024:	00000400 	.word	0x00000400
 8002028:	200001c0 	.word	0x200001c0
 800202c:	20000318 	.word	0x20000318

08002030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <SystemInit+0x20>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203a:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <SystemInit+0x20>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002054:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800208c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002058:	f7ff ffea 	bl	8002030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800205c:	480c      	ldr	r0, [pc, #48]	@ (8002090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800205e:	490d      	ldr	r1, [pc, #52]	@ (8002094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002064:	e002      	b.n	800206c <LoopCopyDataInit>

08002066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206a:	3304      	adds	r3, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002070:	d3f9      	bcc.n	8002066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002074:	4c0a      	ldr	r4, [pc, #40]	@ (80020a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002078:	e001      	b.n	800207e <LoopFillZerobss>

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800207c:	3204      	adds	r2, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002082:	f002 fa19 	bl	80044b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002086:	f7ff f9ed 	bl	8001464 <main>
  bx  lr    
 800208a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800208c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002098:	0807ad58 	.word	0x0807ad58
  ldr r2, =_sbss
 800209c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80020a0:	20000314 	.word	0x20000314

080020a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>
	...

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <HAL_Init+0x40>)
 80020b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <HAL_Init+0x40>)
 80020be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <HAL_Init+0x40>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 f94f 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f000 f808 	bl	80020ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fd4a 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023c00 	.word	0x40023c00

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_InitTick+0x54>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_InitTick+0x58>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002102:	fbb3 f3f1 	udiv	r3, r3, r1
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f967 	bl	80023de <HAL_SYSTICK_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d80a      	bhi.n	8002136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002128:	f000 f92f 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212c:	4a06      	ldr	r2, [pc, #24]	@ (8002148 <HAL_InitTick+0x5c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000004 	.word	0x20000004
 8002144:	2000000c 	.word	0x2000000c
 8002148:	20000008 	.word	0x20000008

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c
 8002170:	200001c4 	.word	0x200001c4

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	@ (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	200001c4 	.word	0x200001c4

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff ffee 	bl	8002174 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffde 	bl	8002174 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4907      	ldr	r1, [pc, #28]	@ (8002270 <__NVIC_EnableIRQ+0x38>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	@ (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	@ (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	@ 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
         );
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002354:	f7ff ff8e 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff29 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff3e 	bl	800221c <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff8e 	bl	80022c8 <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5d 	bl	8002274 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff31 	bl	8002238 <__NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffa2 	bl	8002330 <SysTick_Config>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e159      	b.n	80026c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 8148 	bne.w	80026c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	2b02      	cmp	r3, #2
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d017      	beq.n	80024e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a2 	beq.w	80026c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b57      	ldr	r3, [pc, #348]	@ (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	4a56      	ldr	r2, [pc, #344]	@ (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800258c:	6453      	str	r3, [r2, #68]	@ 0x44
 800258e:	4b54      	ldr	r3, [pc, #336]	@ (80026e0 <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259a:	4a52      	ldr	r2, [pc, #328]	@ (80026e4 <HAL_GPIO_Init+0x2ec>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a49      	ldr	r2, [pc, #292]	@ (80026e8 <HAL_GPIO_Init+0x2f0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0x202>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a48      	ldr	r2, [pc, #288]	@ (80026ec <HAL_GPIO_Init+0x2f4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x1fe>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a47      	ldr	r2, [pc, #284]	@ (80026f0 <HAL_GPIO_Init+0x2f8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x1fa>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a46      	ldr	r2, [pc, #280]	@ (80026f4 <HAL_GPIO_Init+0x2fc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x1f6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a45      	ldr	r2, [pc, #276]	@ (80026f8 <HAL_GPIO_Init+0x300>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x1f2>
 80025e6:	2304      	movs	r3, #4
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x204>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	@ (80026e4 <HAL_GPIO_Init+0x2ec>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b38      	ldr	r3, [pc, #224]	@ (80026fc <HAL_GPIO_Init+0x304>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a2f      	ldr	r2, [pc, #188]	@ (80026fc <HAL_GPIO_Init+0x304>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <HAL_GPIO_Init+0x304>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a24      	ldr	r2, [pc, #144]	@ (80026fc <HAL_GPIO_Init+0x304>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b23      	ldr	r3, [pc, #140]	@ (80026fc <HAL_GPIO_Init+0x304>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1a      	ldr	r2, [pc, #104]	@ (80026fc <HAL_GPIO_Init+0x304>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <HAL_GPIO_Init+0x304>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a0f      	ldr	r2, [pc, #60]	@ (80026fc <HAL_GPIO_Init+0x304>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f aea2 	bls.w	8002414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	@ 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	887b      	ldrh	r3, [r7, #2]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e001      	b.n	8002722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800274c:	e003      	b.n	8002756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	041a      	lsls	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800277a:	4a05      	ldr	r2, [pc, #20]	@ (8002790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f9bc 	bl	8001b00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40013c00 	.word	0x40013c00

08002794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e267      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d075      	beq.n	800289e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027b2:	4b88      	ldr	r3, [pc, #544]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d00c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027be:	4b85      	ldr	r3, [pc, #532]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d112      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ca:	4b82      	ldr	r3, [pc, #520]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d6:	d10b      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4b7e      	ldr	r3, [pc, #504]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05b      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d157      	bne.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e242      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x74>
 80027fa:	4b76      	ldr	r3, [pc, #472]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a75      	ldr	r2, [pc, #468]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b70      	ldr	r3, [pc, #448]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6f      	ldr	r2, [pc, #444]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b6d      	ldr	r3, [pc, #436]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6c      	ldr	r2, [pc, #432]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 800282c:	4b69      	ldr	r3, [pc, #420]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b66      	ldr	r3, [pc, #408]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a65      	ldr	r2, [pc, #404]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff fc92 	bl	8002174 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fc8e 	bl	8002174 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	@ 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e207      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b5b      	ldr	r3, [pc, #364]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xc0>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fc7e 	bl	8002174 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff fc7a 	bl	8002174 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1f3      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b51      	ldr	r3, [pc, #324]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028aa:	4b4a      	ldr	r3, [pc, #296]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c2:	4b44      	ldr	r3, [pc, #272]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b41      	ldr	r3, [pc, #260]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x152>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1c7      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4937      	ldr	r1, [pc, #220]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e03a      	b.n	8002972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b34      	ldr	r3, [pc, #208]	@ (80029d8 <HAL_RCC_OscConfig+0x244>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7ff fc33 	bl	8002174 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002912:	f7ff fc2f 	bl	8002174 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e1a8      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002930:	4b28      	ldr	r3, [pc, #160]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4925      	ldr	r1, [pc, #148]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002946:	4b24      	ldr	r3, [pc, #144]	@ (80029d8 <HAL_RCC_OscConfig+0x244>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7ff fc12 	bl	8002174 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002954:	f7ff fc0e 	bl	8002174 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e187      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d036      	beq.n	80029ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_RCC_OscConfig+0x248>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7ff fbf2 	bl	8002174 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7ff fbee 	bl	8002174 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e167      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_RCC_OscConfig+0x240>)
 80029a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x200>
 80029b2:	e01b      	b.n	80029ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b4:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <HAL_RCC_OscConfig+0x248>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7ff fbdb 	bl	8002174 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	e00e      	b.n	80029e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c2:	f7ff fbd7 	bl	8002174 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d907      	bls.n	80029e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e150      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
 80029d4:	40023800 	.word	0x40023800
 80029d8:	42470000 	.word	0x42470000
 80029dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	4b88      	ldr	r3, [pc, #544]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ea      	bne.n	80029c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8097 	beq.w	8002b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b81      	ldr	r3, [pc, #516]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	4a7c      	ldr	r2, [pc, #496]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b77      	ldr	r3, [pc, #476]	@ (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d118      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a36:	4b74      	ldr	r3, [pc, #464]	@ (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a73      	ldr	r2, [pc, #460]	@ (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7ff fb97 	bl	8002174 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7ff fb93 	bl	8002174 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e10c      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2ea>
 8002a70:	4b64      	ldr	r3, [pc, #400]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a74:	4a63      	ldr	r2, [pc, #396]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x324>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x30c>
 8002a86:	4b5f      	ldr	r3, [pc, #380]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8a:	4a5e      	ldr	r2, [pc, #376]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a92:	4b5c      	ldr	r3, [pc, #368]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a96:	4a5b      	ldr	r2, [pc, #364]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x324>
 8002aa0:	4b58      	ldr	r3, [pc, #352]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	4a57      	ldr	r2, [pc, #348]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aac:	4b55      	ldr	r3, [pc, #340]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	4a54      	ldr	r2, [pc, #336]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7ff fb58 	bl	8002174 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7ff fb54 	bl	8002174 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0cb      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ade:	4b49      	ldr	r3, [pc, #292]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ee      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x334>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aec:	f7ff fb42 	bl	8002174 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7ff fb3e 	bl	8002174 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0b5      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ee      	bne.n	8002af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1c:	4b39      	ldr	r3, [pc, #228]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	4a38      	ldr	r2, [pc, #224]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a1 	beq.w	8002c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b32:	4b34      	ldr	r3, [pc, #208]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d05c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d141      	bne.n	8002bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b31      	ldr	r3, [pc, #196]	@ (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff fb12 	bl	8002174 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7ff fb0e 	bl	8002174 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e087      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	491b      	ldr	r1, [pc, #108]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7ff fae7 	bl	8002174 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7ff fae3 	bl	8002174 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e05c      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x416>
 8002bc8:	e054      	b.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff fad0 	bl	8002174 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff facc 	bl	8002174 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e045      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x444>
 8002bf6:	e03d      	b.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e038      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <HAL_RCC_OscConfig+0x4ec>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d028      	beq.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d121      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0cc      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b68      	ldr	r3, [pc, #416]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d90c      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b63      	ldr	r3, [pc, #396]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	494d      	ldr	r1, [pc, #308]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d044      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b47      	ldr	r3, [pc, #284]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d119      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b3f      	ldr	r3, [pc, #252]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e06f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e067      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b37      	ldr	r3, [pc, #220]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4934      	ldr	r1, [pc, #208]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7ff f9fe 	bl	8002174 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7ff f9fa 	bl	8002174 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e04f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d20c      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b22      	ldr	r3, [pc, #136]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e032      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4916      	ldr	r1, [pc, #88]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490e      	ldr	r1, [pc, #56]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0a:	f000 f821 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490a      	ldr	r1, [pc, #40]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a09      	ldr	r2, [pc, #36]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f95e 	bl	80020ec <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	0807ac3c 	.word	0x0807ac3c
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b094      	sub	sp, #80	@ 0x50
 8002e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e68:	4b79      	ldr	r3, [pc, #484]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d00d      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x40>
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	f200 80e1 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x34>
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e82:	e0db      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b73      	ldr	r3, [pc, #460]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e88:	e0db      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8a:	4b73      	ldr	r3, [pc, #460]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e8e:	e0d8      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e90:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e98:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d063      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	2200      	movs	r2, #0
 8002eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eba:	2300      	movs	r3, #0
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	f04f 0000 	mov.w	r0, #0
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	0159      	lsls	r1, r3, #5
 8002ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed4:	0150      	lsls	r0, r2, #5
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4621      	mov	r1, r4
 8002edc:	1a51      	subs	r1, r2, r1
 8002ede:	6139      	str	r1, [r7, #16]
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	018b      	lsls	r3, r1, #6
 8002ef8:	4651      	mov	r1, sl
 8002efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002efe:	4651      	mov	r1, sl
 8002f00:	018a      	lsls	r2, r1, #6
 8002f02:	4651      	mov	r1, sl
 8002f04:	ebb2 0801 	subs.w	r8, r2, r1
 8002f08:	4659      	mov	r1, fp
 8002f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f22:	4690      	mov	r8, r2
 8002f24:	4699      	mov	r9, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	eb18 0303 	adds.w	r3, r8, r3
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	462b      	mov	r3, r5
 8002f30:	eb49 0303 	adc.w	r3, r9, r3
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f42:	4629      	mov	r1, r5
 8002f44:	024b      	lsls	r3, r1, #9
 8002f46:	4621      	mov	r1, r4
 8002f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	024a      	lsls	r2, r1, #9
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f56:	2200      	movs	r2, #0
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f60:	f7fd fe4a 	bl	8000bf8 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f6c:	e058      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4b38      	ldr	r3, [pc, #224]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2200      	movs	r2, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	4611      	mov	r1, r2
 8002f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f88:	4642      	mov	r2, r8
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	f04f 0000 	mov.w	r0, #0
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	0159      	lsls	r1, r3, #5
 8002f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9a:	0150      	lsls	r0, r2, #5
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	00eb      	lsls	r3, r5, #3
 8002fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd6:	00e2      	lsls	r2, r4, #3
 8002fd8:	4614      	mov	r4, r2
 8002fda:	461d      	mov	r5, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	18e3      	adds	r3, r4, r3
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	eb45 0303 	adc.w	r3, r5, r3
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	61fa      	str	r2, [r7, #28]
 8003010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003014:	f7fd fdf0 	bl	8000bf8 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x204>)
 800303e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003044:	4618      	mov	r0, r3
 8003046:	3750      	adds	r7, #80	@ 0x50
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000004 	.word	0x20000004

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003078:	f7ff fff0 	bl	800305c <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	@ (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	0807ac4c 	.word	0x0807ac4c

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030a0:	f7ff ffdc 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0b5b      	lsrs	r3, r3, #13
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	@ (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	0807ac4c 	.word	0x0807ac4c

080030c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e041      	b.n	800315a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fd6a 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f000 fac0 	bl	8003688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e041      	b.n	80031f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d106      	bne.n	800318e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f839 	bl	8003200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f000 fa71 	bl	8003688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <HAL_TIM_PWM_Start+0x24>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e022      	b.n	800327e <HAL_TIM_PWM_Start+0x6a>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b04      	cmp	r3, #4
 800323c:	d109      	bne.n	8003252 <HAL_TIM_PWM_Start+0x3e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e015      	b.n	800327e <HAL_TIM_PWM_Start+0x6a>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d109      	bne.n	800326c <HAL_TIM_PWM_Start+0x58>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e008      	b.n	800327e <HAL_TIM_PWM_Start+0x6a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e068      	b.n	8003358 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d104      	bne.n	8003296 <HAL_TIM_PWM_Start+0x82>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003294:	e013      	b.n	80032be <HAL_TIM_PWM_Start+0xaa>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_PWM_Start+0x92>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a4:	e00b      	b.n	80032be <HAL_TIM_PWM_Start+0xaa>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_PWM_Start+0xa2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032b4:	e003      	b.n	80032be <HAL_TIM_PWM_Start+0xaa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fc90 	bl	8003bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <HAL_TIM_PWM_Start+0x14c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d107      	bne.n	80032e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003360 <HAL_TIM_PWM_Start+0x14c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_TIM_PWM_Start+0x10e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f8:	d013      	beq.n	8003322 <HAL_TIM_PWM_Start+0x10e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a19      	ldr	r2, [pc, #100]	@ (8003364 <HAL_TIM_PWM_Start+0x150>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_TIM_PWM_Start+0x10e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a17      	ldr	r2, [pc, #92]	@ (8003368 <HAL_TIM_PWM_Start+0x154>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_TIM_PWM_Start+0x10e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a16      	ldr	r2, [pc, #88]	@ (800336c <HAL_TIM_PWM_Start+0x158>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_TIM_PWM_Start+0x10e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a14      	ldr	r2, [pc, #80]	@ (8003370 <HAL_TIM_PWM_Start+0x15c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d111      	bne.n	8003346 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b06      	cmp	r3, #6
 8003332:	d010      	beq.n	8003356 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003344:	e007      	b.n	8003356 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40014000 	.word	0x40014000

08003374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800338e:	2302      	movs	r3, #2
 8003390:	e0ae      	b.n	80034f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	f200 809f 	bhi.w	80034e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033a2:	a201      	add	r2, pc, #4	@ (adr r2, 80033a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	080034e1 	.word	0x080034e1
 80033b0:	080034e1 	.word	0x080034e1
 80033b4:	080034e1 	.word	0x080034e1
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080034e1 	.word	0x080034e1
 80033c0:	080034e1 	.word	0x080034e1
 80033c4:	080034e1 	.word	0x080034e1
 80033c8:	0800345f 	.word	0x0800345f
 80033cc:	080034e1 	.word	0x080034e1
 80033d0:	080034e1 	.word	0x080034e1
 80033d4:	080034e1 	.word	0x080034e1
 80033d8:	0800349f 	.word	0x0800349f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f9dc 	bl	80037a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0208 	orr.w	r2, r2, #8
 80033f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0204 	bic.w	r2, r2, #4
 8003406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6999      	ldr	r1, [r3, #24]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	619a      	str	r2, [r3, #24]
      break;
 800341a:	e064      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fa22 	bl	800386c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6999      	ldr	r1, [r3, #24]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	021a      	lsls	r2, r3, #8
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	619a      	str	r2, [r3, #24]
      break;
 800345c:	e043      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fa6d 	bl	8003944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0208 	orr.w	r2, r2, #8
 8003478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0204 	bic.w	r2, r2, #4
 8003488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69d9      	ldr	r1, [r3, #28]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	61da      	str	r2, [r3, #28]
      break;
 800349c:	e023      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fab7 	bl	8003a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69d9      	ldr	r1, [r3, #28]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	021a      	lsls	r2, r3, #8
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	61da      	str	r2, [r3, #28]
      break;
 80034de:	e002      	b.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
      break;
 80034e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_TIM_ConfigClockSource+0x1c>
 8003510:	2302      	movs	r3, #2
 8003512:	e0b4      	b.n	800367e <HAL_TIM_ConfigClockSource+0x186>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800353a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800354c:	d03e      	beq.n	80035cc <HAL_TIM_ConfigClockSource+0xd4>
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003552:	f200 8087 	bhi.w	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355a:	f000 8086 	beq.w	800366a <HAL_TIM_ConfigClockSource+0x172>
 800355e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003562:	d87f      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 8003564:	2b70      	cmp	r3, #112	@ 0x70
 8003566:	d01a      	beq.n	800359e <HAL_TIM_ConfigClockSource+0xa6>
 8003568:	2b70      	cmp	r3, #112	@ 0x70
 800356a:	d87b      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b60      	cmp	r3, #96	@ 0x60
 800356e:	d050      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x11a>
 8003570:	2b60      	cmp	r3, #96	@ 0x60
 8003572:	d877      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b50      	cmp	r3, #80	@ 0x50
 8003576:	d03c      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003578:	2b50      	cmp	r3, #80	@ 0x50
 800357a:	d873      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d058      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x13a>
 8003580:	2b40      	cmp	r3, #64	@ 0x40
 8003582:	d86f      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b30      	cmp	r3, #48	@ 0x30
 8003586:	d064      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x15a>
 8003588:	2b30      	cmp	r3, #48	@ 0x30
 800358a:	d86b      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b20      	cmp	r3, #32
 800358e:	d060      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x15a>
 8003590:	2b20      	cmp	r3, #32
 8003592:	d867      	bhi.n	8003664 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d05c      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x15a>
 8003598:	2b10      	cmp	r3, #16
 800359a:	d05a      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x15a>
 800359c:	e062      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ae:	f000 fafd 	bl	8003bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	609a      	str	r2, [r3, #8]
      break;
 80035ca:	e04f      	b.n	800366c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035dc:	f000 fae6 	bl	8003bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ee:	609a      	str	r2, [r3, #8]
      break;
 80035f0:	e03c      	b.n	800366c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fe:	461a      	mov	r2, r3
 8003600:	f000 fa5a 	bl	8003ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2150      	movs	r1, #80	@ 0x50
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fab3 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 8003610:	e02c      	b.n	800366c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800361e:	461a      	mov	r2, r3
 8003620:	f000 fa79 	bl	8003b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2160      	movs	r1, #96	@ 0x60
 800362a:	4618      	mov	r0, r3
 800362c:	f000 faa3 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 8003630:	e01c      	b.n	800366c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363e:	461a      	mov	r2, r3
 8003640:	f000 fa3a 	bl	8003ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2140      	movs	r1, #64	@ 0x40
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fa93 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 8003650:	e00c      	b.n	800366c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f000 fa8a 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 8003662:	e003      	b.n	800366c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e000      	b.n	800366c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800366a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3a      	ldr	r2, [pc, #232]	@ (8003784 <TIM_Base_SetConfig+0xfc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00f      	beq.n	80036c0 <TIM_Base_SetConfig+0x38>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a6:	d00b      	beq.n	80036c0 <TIM_Base_SetConfig+0x38>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a37      	ldr	r2, [pc, #220]	@ (8003788 <TIM_Base_SetConfig+0x100>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <TIM_Base_SetConfig+0x38>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a36      	ldr	r2, [pc, #216]	@ (800378c <TIM_Base_SetConfig+0x104>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_Base_SetConfig+0x38>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a35      	ldr	r2, [pc, #212]	@ (8003790 <TIM_Base_SetConfig+0x108>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003784 <TIM_Base_SetConfig+0xfc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01b      	beq.n	8003712 <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e0:	d017      	beq.n	8003712 <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a28      	ldr	r2, [pc, #160]	@ (8003788 <TIM_Base_SetConfig+0x100>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a27      	ldr	r2, [pc, #156]	@ (800378c <TIM_Base_SetConfig+0x104>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00f      	beq.n	8003712 <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a26      	ldr	r2, [pc, #152]	@ (8003790 <TIM_Base_SetConfig+0x108>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00b      	beq.n	8003712 <TIM_Base_SetConfig+0x8a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a25      	ldr	r2, [pc, #148]	@ (8003794 <TIM_Base_SetConfig+0x10c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a24      	ldr	r2, [pc, #144]	@ (8003798 <TIM_Base_SetConfig+0x110>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_Base_SetConfig+0x8a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a23      	ldr	r2, [pc, #140]	@ (800379c <TIM_Base_SetConfig+0x114>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d108      	bne.n	8003724 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a0e      	ldr	r2, [pc, #56]	@ (8003784 <TIM_Base_SetConfig+0xfc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d103      	bne.n	8003758 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f023 0201 	bic.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]
  }
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40000c00 	.word	0x40000c00
 8003794:	40014000 	.word	0x40014000
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800

080037a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f023 0201 	bic.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 0302 	bic.w	r3, r3, #2
 80037e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <TIM_OC1_SetConfig+0xc8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d10c      	bne.n	8003816 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0308 	bic.w	r3, r3, #8
 8003802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a13      	ldr	r2, [pc, #76]	@ (8003868 <TIM_OC1_SetConfig+0xc8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d111      	bne.n	8003842 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800382c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	621a      	str	r2, [r3, #32]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	40010000 	.word	0x40010000

0800386c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f023 0210 	bic.w	r2, r3, #16
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f023 0320 	bic.w	r3, r3, #32
 80038b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003940 <TIM_OC2_SetConfig+0xd4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10d      	bne.n	80038e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a15      	ldr	r2, [pc, #84]	@ (8003940 <TIM_OC2_SetConfig+0xd4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d113      	bne.n	8003918 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40010000 	.word	0x40010000

08003944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800398c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a14 <TIM_OC3_SetConfig+0xd0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d10d      	bne.n	80039be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a14      	ldr	r2, [pc, #80]	@ (8003a14 <TIM_OC3_SetConfig+0xd0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d113      	bne.n	80039ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40010000 	.word	0x40010000

08003a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	031b      	lsls	r3, r3, #12
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a10      	ldr	r2, [pc, #64]	@ (8003ab4 <TIM_OC4_SetConfig+0x9c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d109      	bne.n	8003a8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	019b      	lsls	r3, r3, #6
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000

08003ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 030a 	bic.w	r3, r3, #10
 8003af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f023 0210 	bic.w	r2, r3, #16
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	031b      	lsls	r3, r3, #12
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f043 0307 	orr.w	r3, r3, #7
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	021a      	lsls	r2, r3, #8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	609a      	str	r2, [r3, #8]
}
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2201      	movs	r2, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	401a      	ands	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e050      	b.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9c:	d013      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	@ (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a16      	ldr	r2, [pc, #88]	@ (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a15      	ldr	r2, [pc, #84]	@ (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a13      	ldr	r2, [pc, #76]	@ (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40000c00 	.word	0x40000c00
 8003d10:	40014000 	.word	0x40014000

08003d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e042      	b.n	8003dac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe f832 	bl	8001da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	@ 0x24
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f82b 	bl	8003db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db8:	b0c0      	sub	sp, #256	@ 0x100
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	68d9      	ldr	r1, [r3, #12]
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	ea40 0301 	orr.w	r3, r0, r1
 8003ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e0c:	f021 010c 	bic.w	r1, r1, #12
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2e:	6999      	ldr	r1, [r3, #24]
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	ea40 0301 	orr.w	r3, r0, r1
 8003e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b8f      	ldr	r3, [pc, #572]	@ (8004080 <UART_SetConfig+0x2cc>)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d005      	beq.n	8003e54 <UART_SetConfig+0xa0>
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8004084 <UART_SetConfig+0x2d0>)
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d104      	bne.n	8003e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e54:	f7ff f922 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8003e58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e5c:	e003      	b.n	8003e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e5e:	f7ff f909 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8003e62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e70:	f040 810c 	bne.w	800408c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e86:	4622      	mov	r2, r4
 8003e88:	462b      	mov	r3, r5
 8003e8a:	1891      	adds	r1, r2, r2
 8003e8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e8e:	415b      	adcs	r3, r3
 8003e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e96:	4621      	mov	r1, r4
 8003e98:	eb12 0801 	adds.w	r8, r2, r1
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	eb43 0901 	adc.w	r9, r3, r1
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eb6:	4690      	mov	r8, r2
 8003eb8:	4699      	mov	r9, r3
 8003eba:	4623      	mov	r3, r4
 8003ebc:	eb18 0303 	adds.w	r3, r8, r3
 8003ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	eb49 0303 	adc.w	r3, r9, r3
 8003eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003eda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	18db      	adds	r3, r3, r3
 8003ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ee8:	4613      	mov	r3, r2
 8003eea:	eb42 0303 	adc.w	r3, r2, r3
 8003eee:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ef8:	f7fc fe7e 	bl	8000bf8 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4b61      	ldr	r3, [pc, #388]	@ (8004088 <UART_SetConfig+0x2d4>)
 8003f02:	fba3 2302 	umull	r2, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	011c      	lsls	r4, r3, #4
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f24:	415b      	adcs	r3, r3
 8003f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f32:	4649      	mov	r1, r9
 8003f34:	eb43 0b01 	adc.w	fp, r3, r1
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f4c:	4692      	mov	sl, r2
 8003f4e:	469b      	mov	fp, r3
 8003f50:	4643      	mov	r3, r8
 8003f52:	eb1a 0303 	adds.w	r3, sl, r3
 8003f56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	18db      	adds	r3, r3, r3
 8003f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f7e:	4613      	mov	r3, r2
 8003f80:	eb42 0303 	adc.w	r3, r2, r3
 8003f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f8e:	f7fc fe33 	bl	8000bf8 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4611      	mov	r1, r2
 8003f98:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <UART_SetConfig+0x2d4>)
 8003f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	2264      	movs	r2, #100	@ 0x64
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	1acb      	subs	r3, r1, r3
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fae:	4b36      	ldr	r3, [pc, #216]	@ (8004088 <UART_SetConfig+0x2d4>)
 8003fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fbc:	441c      	add	r4, r3
 8003fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	1891      	adds	r1, r2, r2
 8003fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fd8:	415b      	adcs	r3, r3
 8003fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	1851      	adds	r1, r2, r1
 8003fe4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	414b      	adcs	r3, r1
 8003fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ff8:	4659      	mov	r1, fp
 8003ffa:	00cb      	lsls	r3, r1, #3
 8003ffc:	4651      	mov	r1, sl
 8003ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004002:	4651      	mov	r1, sl
 8004004:	00ca      	lsls	r2, r1, #3
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	4603      	mov	r3, r0
 800400c:	4642      	mov	r2, r8
 800400e:	189b      	adds	r3, r3, r2
 8004010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004014:	464b      	mov	r3, r9
 8004016:	460a      	mov	r2, r1
 8004018:	eb42 0303 	adc.w	r3, r2, r3
 800401c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800402c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004034:	460b      	mov	r3, r1
 8004036:	18db      	adds	r3, r3, r3
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403a:	4613      	mov	r3, r2
 800403c:	eb42 0303 	adc.w	r3, r2, r3
 8004040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800404a:	f7fc fdd5 	bl	8000bf8 <__aeabi_uldivmod>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <UART_SetConfig+0x2d4>)
 8004054:	fba3 1302 	umull	r1, r3, r3, r2
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2164      	movs	r1, #100	@ 0x64
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	3332      	adds	r3, #50	@ 0x32
 8004066:	4a08      	ldr	r2, [pc, #32]	@ (8004088 <UART_SetConfig+0x2d4>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 0207 	and.w	r2, r3, #7
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4422      	add	r2, r4
 800407a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800407c:	e106      	b.n	800428c <UART_SetConfig+0x4d8>
 800407e:	bf00      	nop
 8004080:	40011000 	.word	0x40011000
 8004084:	40011400 	.word	0x40011400
 8004088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800408c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004090:	2200      	movs	r2, #0
 8004092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004096:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800409a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800409e:	4642      	mov	r2, r8
 80040a0:	464b      	mov	r3, r9
 80040a2:	1891      	adds	r1, r2, r2
 80040a4:	6239      	str	r1, [r7, #32]
 80040a6:	415b      	adcs	r3, r3
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ae:	4641      	mov	r1, r8
 80040b0:	1854      	adds	r4, r2, r1
 80040b2:	4649      	mov	r1, r9
 80040b4:	eb43 0501 	adc.w	r5, r3, r1
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	00eb      	lsls	r3, r5, #3
 80040c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040c6:	00e2      	lsls	r2, r4, #3
 80040c8:	4614      	mov	r4, r2
 80040ca:	461d      	mov	r5, r3
 80040cc:	4643      	mov	r3, r8
 80040ce:	18e3      	adds	r3, r4, r3
 80040d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040d4:	464b      	mov	r3, r9
 80040d6:	eb45 0303 	adc.w	r3, r5, r3
 80040da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040fa:	4629      	mov	r1, r5
 80040fc:	008b      	lsls	r3, r1, #2
 80040fe:	4621      	mov	r1, r4
 8004100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004104:	4621      	mov	r1, r4
 8004106:	008a      	lsls	r2, r1, #2
 8004108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800410c:	f7fc fd74 	bl	8000bf8 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4b60      	ldr	r3, [pc, #384]	@ (8004298 <UART_SetConfig+0x4e4>)
 8004116:	fba3 2302 	umull	r2, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	011c      	lsls	r4, r3, #4
 800411e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004122:	2200      	movs	r2, #0
 8004124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004128:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800412c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	1891      	adds	r1, r2, r2
 8004136:	61b9      	str	r1, [r7, #24]
 8004138:	415b      	adcs	r3, r3
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004140:	4641      	mov	r1, r8
 8004142:	1851      	adds	r1, r2, r1
 8004144:	6139      	str	r1, [r7, #16]
 8004146:	4649      	mov	r1, r9
 8004148:	414b      	adcs	r3, r1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004158:	4659      	mov	r1, fp
 800415a:	00cb      	lsls	r3, r1, #3
 800415c:	4651      	mov	r1, sl
 800415e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004162:	4651      	mov	r1, sl
 8004164:	00ca      	lsls	r2, r1, #3
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	4603      	mov	r3, r0
 800416c:	4642      	mov	r2, r8
 800416e:	189b      	adds	r3, r3, r2
 8004170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004174:	464b      	mov	r3, r9
 8004176:	460a      	mov	r2, r1
 8004178:	eb42 0303 	adc.w	r3, r2, r3
 800417c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	67bb      	str	r3, [r7, #120]	@ 0x78
 800418a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004198:	4649      	mov	r1, r9
 800419a:	008b      	lsls	r3, r1, #2
 800419c:	4641      	mov	r1, r8
 800419e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a2:	4641      	mov	r1, r8
 80041a4:	008a      	lsls	r2, r1, #2
 80041a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041aa:	f7fc fd25 	bl	8000bf8 <__aeabi_uldivmod>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	4b38      	ldr	r3, [pc, #224]	@ (8004298 <UART_SetConfig+0x4e4>)
 80041b6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2264      	movs	r2, #100	@ 0x64
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	1acb      	subs	r3, r1, r3
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	3332      	adds	r3, #50	@ 0x32
 80041c8:	4a33      	ldr	r2, [pc, #204]	@ (8004298 <UART_SetConfig+0x4e4>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d4:	441c      	add	r4, r3
 80041d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041da:	2200      	movs	r2, #0
 80041dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80041de:	677a      	str	r2, [r7, #116]	@ 0x74
 80041e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041e4:	4642      	mov	r2, r8
 80041e6:	464b      	mov	r3, r9
 80041e8:	1891      	adds	r1, r2, r2
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	415b      	adcs	r3, r3
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041f4:	4641      	mov	r1, r8
 80041f6:	1851      	adds	r1, r2, r1
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	4649      	mov	r1, r9
 80041fc:	414b      	adcs	r3, r1
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800420c:	4659      	mov	r1, fp
 800420e:	00cb      	lsls	r3, r1, #3
 8004210:	4651      	mov	r1, sl
 8004212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004216:	4651      	mov	r1, sl
 8004218:	00ca      	lsls	r2, r1, #3
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	4603      	mov	r3, r0
 8004220:	4642      	mov	r2, r8
 8004222:	189b      	adds	r3, r3, r2
 8004224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004226:	464b      	mov	r3, r9
 8004228:	460a      	mov	r2, r1
 800422a:	eb42 0303 	adc.w	r3, r2, r3
 800422e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	663b      	str	r3, [r7, #96]	@ 0x60
 800423a:	667a      	str	r2, [r7, #100]	@ 0x64
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004248:	4649      	mov	r1, r9
 800424a:	008b      	lsls	r3, r1, #2
 800424c:	4641      	mov	r1, r8
 800424e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004252:	4641      	mov	r1, r8
 8004254:	008a      	lsls	r2, r1, #2
 8004256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800425a:	f7fc fccd 	bl	8000bf8 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <UART_SetConfig+0x4e4>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	@ 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3332      	adds	r3, #50	@ 0x32
 8004276:	4a08      	ldr	r2, [pc, #32]	@ (8004298 <UART_SetConfig+0x4e4>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 020f 	and.w	r2, r3, #15
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4422      	add	r2, r4
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004292:	46bd      	mov	sp, r7
 8004294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004298:	51eb851f 	.word	0x51eb851f

0800429c <rand>:
 800429c:	4b16      	ldr	r3, [pc, #88]	@ (80042f8 <rand+0x5c>)
 800429e:	b510      	push	{r4, lr}
 80042a0:	681c      	ldr	r4, [r3, #0]
 80042a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80042a4:	b9b3      	cbnz	r3, 80042d4 <rand+0x38>
 80042a6:	2018      	movs	r0, #24
 80042a8:	f000 f94c 	bl	8004544 <malloc>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6320      	str	r0, [r4, #48]	@ 0x30
 80042b0:	b920      	cbnz	r0, 80042bc <rand+0x20>
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <rand+0x60>)
 80042b4:	4812      	ldr	r0, [pc, #72]	@ (8004300 <rand+0x64>)
 80042b6:	2152      	movs	r1, #82	@ 0x52
 80042b8:	f000 f926 	bl	8004508 <__assert_func>
 80042bc:	4911      	ldr	r1, [pc, #68]	@ (8004304 <rand+0x68>)
 80042be:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <rand+0x6c>)
 80042c0:	e9c0 1300 	strd	r1, r3, [r0]
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <rand+0x70>)
 80042c6:	6083      	str	r3, [r0, #8]
 80042c8:	230b      	movs	r3, #11
 80042ca:	8183      	strh	r3, [r0, #12]
 80042cc:	2100      	movs	r1, #0
 80042ce:	2001      	movs	r0, #1
 80042d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80042d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80042d6:	480e      	ldr	r0, [pc, #56]	@ (8004310 <rand+0x74>)
 80042d8:	690b      	ldr	r3, [r1, #16]
 80042da:	694c      	ldr	r4, [r1, #20]
 80042dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004314 <rand+0x78>)
 80042de:	4358      	muls	r0, r3
 80042e0:	fb02 0004 	mla	r0, r2, r4, r0
 80042e4:	fba3 3202 	umull	r3, r2, r3, r2
 80042e8:	3301      	adds	r3, #1
 80042ea:	eb40 0002 	adc.w	r0, r0, r2
 80042ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80042f2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80042f6:	bd10      	pop	{r4, pc}
 80042f8:	2000001c 	.word	0x2000001c
 80042fc:	0807ac54 	.word	0x0807ac54
 8004300:	0807ac6b 	.word	0x0807ac6b
 8004304:	abcd330e 	.word	0xabcd330e
 8004308:	e66d1234 	.word	0xe66d1234
 800430c:	0005deec 	.word	0x0005deec
 8004310:	5851f42d 	.word	0x5851f42d
 8004314:	4c957f2d 	.word	0x4c957f2d

08004318 <std>:
 8004318:	2300      	movs	r3, #0
 800431a:	b510      	push	{r4, lr}
 800431c:	4604      	mov	r4, r0
 800431e:	e9c0 3300 	strd	r3, r3, [r0]
 8004322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004326:	6083      	str	r3, [r0, #8]
 8004328:	8181      	strh	r1, [r0, #12]
 800432a:	6643      	str	r3, [r0, #100]	@ 0x64
 800432c:	81c2      	strh	r2, [r0, #14]
 800432e:	6183      	str	r3, [r0, #24]
 8004330:	4619      	mov	r1, r3
 8004332:	2208      	movs	r2, #8
 8004334:	305c      	adds	r0, #92	@ 0x5c
 8004336:	f000 f8b1 	bl	800449c <memset>
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <std+0x58>)
 800433c:	6263      	str	r3, [r4, #36]	@ 0x24
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <std+0x5c>)
 8004340:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004342:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <std+0x60>)
 8004344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <std+0x64>)
 8004348:	6323      	str	r3, [r4, #48]	@ 0x30
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <std+0x68>)
 800434c:	6224      	str	r4, [r4, #32]
 800434e:	429c      	cmp	r4, r3
 8004350:	d006      	beq.n	8004360 <std+0x48>
 8004352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004356:	4294      	cmp	r4, r2
 8004358:	d002      	beq.n	8004360 <std+0x48>
 800435a:	33d0      	adds	r3, #208	@ 0xd0
 800435c:	429c      	cmp	r4, r3
 800435e:	d105      	bne.n	800436c <std+0x54>
 8004360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004368:	f000 b8ca 	b.w	8004500 <__retarget_lock_init_recursive>
 800436c:	bd10      	pop	{r4, pc}
 800436e:	bf00      	nop
 8004370:	08004809 	.word	0x08004809
 8004374:	0800482b 	.word	0x0800482b
 8004378:	08004863 	.word	0x08004863
 800437c:	08004887 	.word	0x08004887
 8004380:	200001c8 	.word	0x200001c8

08004384 <stdio_exit_handler>:
 8004384:	4a02      	ldr	r2, [pc, #8]	@ (8004390 <stdio_exit_handler+0xc>)
 8004386:	4903      	ldr	r1, [pc, #12]	@ (8004394 <stdio_exit_handler+0x10>)
 8004388:	4803      	ldr	r0, [pc, #12]	@ (8004398 <stdio_exit_handler+0x14>)
 800438a:	f000 b869 	b.w	8004460 <_fwalk_sglue>
 800438e:	bf00      	nop
 8004390:	20000010 	.word	0x20000010
 8004394:	080047a1 	.word	0x080047a1
 8004398:	20000020 	.word	0x20000020

0800439c <cleanup_stdio>:
 800439c:	6841      	ldr	r1, [r0, #4]
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <cleanup_stdio+0x34>)
 80043a0:	4299      	cmp	r1, r3
 80043a2:	b510      	push	{r4, lr}
 80043a4:	4604      	mov	r4, r0
 80043a6:	d001      	beq.n	80043ac <cleanup_stdio+0x10>
 80043a8:	f000 f9fa 	bl	80047a0 <_fflush_r>
 80043ac:	68a1      	ldr	r1, [r4, #8]
 80043ae:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <cleanup_stdio+0x38>)
 80043b0:	4299      	cmp	r1, r3
 80043b2:	d002      	beq.n	80043ba <cleanup_stdio+0x1e>
 80043b4:	4620      	mov	r0, r4
 80043b6:	f000 f9f3 	bl	80047a0 <_fflush_r>
 80043ba:	68e1      	ldr	r1, [r4, #12]
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <cleanup_stdio+0x3c>)
 80043be:	4299      	cmp	r1, r3
 80043c0:	d004      	beq.n	80043cc <cleanup_stdio+0x30>
 80043c2:	4620      	mov	r0, r4
 80043c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c8:	f000 b9ea 	b.w	80047a0 <_fflush_r>
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	bf00      	nop
 80043d0:	200001c8 	.word	0x200001c8
 80043d4:	20000230 	.word	0x20000230
 80043d8:	20000298 	.word	0x20000298

080043dc <global_stdio_init.part.0>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <global_stdio_init.part.0+0x30>)
 80043e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004410 <global_stdio_init.part.0+0x34>)
 80043e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004414 <global_stdio_init.part.0+0x38>)
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	4620      	mov	r0, r4
 80043e8:	2200      	movs	r2, #0
 80043ea:	2104      	movs	r1, #4
 80043ec:	f7ff ff94 	bl	8004318 <std>
 80043f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043f4:	2201      	movs	r2, #1
 80043f6:	2109      	movs	r1, #9
 80043f8:	f7ff ff8e 	bl	8004318 <std>
 80043fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004400:	2202      	movs	r2, #2
 8004402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004406:	2112      	movs	r1, #18
 8004408:	f7ff bf86 	b.w	8004318 <std>
 800440c:	20000300 	.word	0x20000300
 8004410:	200001c8 	.word	0x200001c8
 8004414:	08004385 	.word	0x08004385

08004418 <__sfp_lock_acquire>:
 8004418:	4801      	ldr	r0, [pc, #4]	@ (8004420 <__sfp_lock_acquire+0x8>)
 800441a:	f000 b872 	b.w	8004502 <__retarget_lock_acquire_recursive>
 800441e:	bf00      	nop
 8004420:	20000305 	.word	0x20000305

08004424 <__sfp_lock_release>:
 8004424:	4801      	ldr	r0, [pc, #4]	@ (800442c <__sfp_lock_release+0x8>)
 8004426:	f000 b86d 	b.w	8004504 <__retarget_lock_release_recursive>
 800442a:	bf00      	nop
 800442c:	20000305 	.word	0x20000305

08004430 <__sinit>:
 8004430:	b510      	push	{r4, lr}
 8004432:	4604      	mov	r4, r0
 8004434:	f7ff fff0 	bl	8004418 <__sfp_lock_acquire>
 8004438:	6a23      	ldr	r3, [r4, #32]
 800443a:	b11b      	cbz	r3, 8004444 <__sinit+0x14>
 800443c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004440:	f7ff bff0 	b.w	8004424 <__sfp_lock_release>
 8004444:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <__sinit+0x28>)
 8004446:	6223      	str	r3, [r4, #32]
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <__sinit+0x2c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f5      	bne.n	800443c <__sinit+0xc>
 8004450:	f7ff ffc4 	bl	80043dc <global_stdio_init.part.0>
 8004454:	e7f2      	b.n	800443c <__sinit+0xc>
 8004456:	bf00      	nop
 8004458:	0800439d 	.word	0x0800439d
 800445c:	20000300 	.word	0x20000300

08004460 <_fwalk_sglue>:
 8004460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004464:	4607      	mov	r7, r0
 8004466:	4688      	mov	r8, r1
 8004468:	4614      	mov	r4, r2
 800446a:	2600      	movs	r6, #0
 800446c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004470:	f1b9 0901 	subs.w	r9, r9, #1
 8004474:	d505      	bpl.n	8004482 <_fwalk_sglue+0x22>
 8004476:	6824      	ldr	r4, [r4, #0]
 8004478:	2c00      	cmp	r4, #0
 800447a:	d1f7      	bne.n	800446c <_fwalk_sglue+0xc>
 800447c:	4630      	mov	r0, r6
 800447e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004482:	89ab      	ldrh	r3, [r5, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d907      	bls.n	8004498 <_fwalk_sglue+0x38>
 8004488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800448c:	3301      	adds	r3, #1
 800448e:	d003      	beq.n	8004498 <_fwalk_sglue+0x38>
 8004490:	4629      	mov	r1, r5
 8004492:	4638      	mov	r0, r7
 8004494:	47c0      	blx	r8
 8004496:	4306      	orrs	r6, r0
 8004498:	3568      	adds	r5, #104	@ 0x68
 800449a:	e7e9      	b.n	8004470 <_fwalk_sglue+0x10>

0800449c <memset>:
 800449c:	4402      	add	r2, r0
 800449e:	4603      	mov	r3, r0
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d100      	bne.n	80044a6 <memset+0xa>
 80044a4:	4770      	bx	lr
 80044a6:	f803 1b01 	strb.w	r1, [r3], #1
 80044aa:	e7f9      	b.n	80044a0 <memset+0x4>

080044ac <__errno>:
 80044ac:	4b01      	ldr	r3, [pc, #4]	@ (80044b4 <__errno+0x8>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	2000001c 	.word	0x2000001c

080044b8 <__libc_init_array>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	4d0d      	ldr	r5, [pc, #52]	@ (80044f0 <__libc_init_array+0x38>)
 80044bc:	4c0d      	ldr	r4, [pc, #52]	@ (80044f4 <__libc_init_array+0x3c>)
 80044be:	1b64      	subs	r4, r4, r5
 80044c0:	10a4      	asrs	r4, r4, #2
 80044c2:	2600      	movs	r6, #0
 80044c4:	42a6      	cmp	r6, r4
 80044c6:	d109      	bne.n	80044dc <__libc_init_array+0x24>
 80044c8:	4d0b      	ldr	r5, [pc, #44]	@ (80044f8 <__libc_init_array+0x40>)
 80044ca:	4c0c      	ldr	r4, [pc, #48]	@ (80044fc <__libc_init_array+0x44>)
 80044cc:	f000 fffa 	bl	80054c4 <_init>
 80044d0:	1b64      	subs	r4, r4, r5
 80044d2:	10a4      	asrs	r4, r4, #2
 80044d4:	2600      	movs	r6, #0
 80044d6:	42a6      	cmp	r6, r4
 80044d8:	d105      	bne.n	80044e6 <__libc_init_array+0x2e>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e0:	4798      	blx	r3
 80044e2:	3601      	adds	r6, #1
 80044e4:	e7ee      	b.n	80044c4 <__libc_init_array+0xc>
 80044e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ea:	4798      	blx	r3
 80044ec:	3601      	adds	r6, #1
 80044ee:	e7f2      	b.n	80044d6 <__libc_init_array+0x1e>
 80044f0:	0807ad50 	.word	0x0807ad50
 80044f4:	0807ad50 	.word	0x0807ad50
 80044f8:	0807ad50 	.word	0x0807ad50
 80044fc:	0807ad54 	.word	0x0807ad54

08004500 <__retarget_lock_init_recursive>:
 8004500:	4770      	bx	lr

08004502 <__retarget_lock_acquire_recursive>:
 8004502:	4770      	bx	lr

08004504 <__retarget_lock_release_recursive>:
 8004504:	4770      	bx	lr
	...

08004508 <__assert_func>:
 8004508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800450a:	4614      	mov	r4, r2
 800450c:	461a      	mov	r2, r3
 800450e:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <__assert_func+0x2c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4605      	mov	r5, r0
 8004514:	68d8      	ldr	r0, [r3, #12]
 8004516:	b14c      	cbz	r4, 800452c <__assert_func+0x24>
 8004518:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <__assert_func+0x30>)
 800451a:	9100      	str	r1, [sp, #0]
 800451c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004520:	4906      	ldr	r1, [pc, #24]	@ (800453c <__assert_func+0x34>)
 8004522:	462b      	mov	r3, r5
 8004524:	f000 f9b4 	bl	8004890 <fiprintf>
 8004528:	f000 fa1a 	bl	8004960 <abort>
 800452c:	4b04      	ldr	r3, [pc, #16]	@ (8004540 <__assert_func+0x38>)
 800452e:	461c      	mov	r4, r3
 8004530:	e7f3      	b.n	800451a <__assert_func+0x12>
 8004532:	bf00      	nop
 8004534:	2000001c 	.word	0x2000001c
 8004538:	0807acc3 	.word	0x0807acc3
 800453c:	0807acd0 	.word	0x0807acd0
 8004540:	0807acfe 	.word	0x0807acfe

08004544 <malloc>:
 8004544:	4b02      	ldr	r3, [pc, #8]	@ (8004550 <malloc+0xc>)
 8004546:	4601      	mov	r1, r0
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	f000 b825 	b.w	8004598 <_malloc_r>
 800454e:	bf00      	nop
 8004550:	2000001c 	.word	0x2000001c

08004554 <sbrk_aligned>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4e0f      	ldr	r6, [pc, #60]	@ (8004594 <sbrk_aligned+0x40>)
 8004558:	460c      	mov	r4, r1
 800455a:	6831      	ldr	r1, [r6, #0]
 800455c:	4605      	mov	r5, r0
 800455e:	b911      	cbnz	r1, 8004566 <sbrk_aligned+0x12>
 8004560:	f000 f9cc 	bl	80048fc <_sbrk_r>
 8004564:	6030      	str	r0, [r6, #0]
 8004566:	4621      	mov	r1, r4
 8004568:	4628      	mov	r0, r5
 800456a:	f000 f9c7 	bl	80048fc <_sbrk_r>
 800456e:	1c43      	adds	r3, r0, #1
 8004570:	d103      	bne.n	800457a <sbrk_aligned+0x26>
 8004572:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004576:	4620      	mov	r0, r4
 8004578:	bd70      	pop	{r4, r5, r6, pc}
 800457a:	1cc4      	adds	r4, r0, #3
 800457c:	f024 0403 	bic.w	r4, r4, #3
 8004580:	42a0      	cmp	r0, r4
 8004582:	d0f8      	beq.n	8004576 <sbrk_aligned+0x22>
 8004584:	1a21      	subs	r1, r4, r0
 8004586:	4628      	mov	r0, r5
 8004588:	f000 f9b8 	bl	80048fc <_sbrk_r>
 800458c:	3001      	adds	r0, #1
 800458e:	d1f2      	bne.n	8004576 <sbrk_aligned+0x22>
 8004590:	e7ef      	b.n	8004572 <sbrk_aligned+0x1e>
 8004592:	bf00      	nop
 8004594:	20000308 	.word	0x20000308

08004598 <_malloc_r>:
 8004598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800459c:	1ccd      	adds	r5, r1, #3
 800459e:	f025 0503 	bic.w	r5, r5, #3
 80045a2:	3508      	adds	r5, #8
 80045a4:	2d0c      	cmp	r5, #12
 80045a6:	bf38      	it	cc
 80045a8:	250c      	movcc	r5, #12
 80045aa:	2d00      	cmp	r5, #0
 80045ac:	4606      	mov	r6, r0
 80045ae:	db01      	blt.n	80045b4 <_malloc_r+0x1c>
 80045b0:	42a9      	cmp	r1, r5
 80045b2:	d904      	bls.n	80045be <_malloc_r+0x26>
 80045b4:	230c      	movs	r3, #12
 80045b6:	6033      	str	r3, [r6, #0]
 80045b8:	2000      	movs	r0, #0
 80045ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004694 <_malloc_r+0xfc>
 80045c2:	f000 f915 	bl	80047f0 <__malloc_lock>
 80045c6:	f8d8 3000 	ldr.w	r3, [r8]
 80045ca:	461c      	mov	r4, r3
 80045cc:	bb44      	cbnz	r4, 8004620 <_malloc_r+0x88>
 80045ce:	4629      	mov	r1, r5
 80045d0:	4630      	mov	r0, r6
 80045d2:	f7ff ffbf 	bl	8004554 <sbrk_aligned>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	4604      	mov	r4, r0
 80045da:	d158      	bne.n	800468e <_malloc_r+0xf6>
 80045dc:	f8d8 4000 	ldr.w	r4, [r8]
 80045e0:	4627      	mov	r7, r4
 80045e2:	2f00      	cmp	r7, #0
 80045e4:	d143      	bne.n	800466e <_malloc_r+0xd6>
 80045e6:	2c00      	cmp	r4, #0
 80045e8:	d04b      	beq.n	8004682 <_malloc_r+0xea>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	4639      	mov	r1, r7
 80045ee:	4630      	mov	r0, r6
 80045f0:	eb04 0903 	add.w	r9, r4, r3
 80045f4:	f000 f982 	bl	80048fc <_sbrk_r>
 80045f8:	4581      	cmp	r9, r0
 80045fa:	d142      	bne.n	8004682 <_malloc_r+0xea>
 80045fc:	6821      	ldr	r1, [r4, #0]
 80045fe:	1a6d      	subs	r5, r5, r1
 8004600:	4629      	mov	r1, r5
 8004602:	4630      	mov	r0, r6
 8004604:	f7ff ffa6 	bl	8004554 <sbrk_aligned>
 8004608:	3001      	adds	r0, #1
 800460a:	d03a      	beq.n	8004682 <_malloc_r+0xea>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	442b      	add	r3, r5
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	f8d8 3000 	ldr.w	r3, [r8]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	bb62      	cbnz	r2, 8004674 <_malloc_r+0xdc>
 800461a:	f8c8 7000 	str.w	r7, [r8]
 800461e:	e00f      	b.n	8004640 <_malloc_r+0xa8>
 8004620:	6822      	ldr	r2, [r4, #0]
 8004622:	1b52      	subs	r2, r2, r5
 8004624:	d420      	bmi.n	8004668 <_malloc_r+0xd0>
 8004626:	2a0b      	cmp	r2, #11
 8004628:	d917      	bls.n	800465a <_malloc_r+0xc2>
 800462a:	1961      	adds	r1, r4, r5
 800462c:	42a3      	cmp	r3, r4
 800462e:	6025      	str	r5, [r4, #0]
 8004630:	bf18      	it	ne
 8004632:	6059      	strne	r1, [r3, #4]
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	bf08      	it	eq
 8004638:	f8c8 1000 	streq.w	r1, [r8]
 800463c:	5162      	str	r2, [r4, r5]
 800463e:	604b      	str	r3, [r1, #4]
 8004640:	4630      	mov	r0, r6
 8004642:	f000 f8db 	bl	80047fc <__malloc_unlock>
 8004646:	f104 000b 	add.w	r0, r4, #11
 800464a:	1d23      	adds	r3, r4, #4
 800464c:	f020 0007 	bic.w	r0, r0, #7
 8004650:	1ac2      	subs	r2, r0, r3
 8004652:	bf1c      	itt	ne
 8004654:	1a1b      	subne	r3, r3, r0
 8004656:	50a3      	strne	r3, [r4, r2]
 8004658:	e7af      	b.n	80045ba <_malloc_r+0x22>
 800465a:	6862      	ldr	r2, [r4, #4]
 800465c:	42a3      	cmp	r3, r4
 800465e:	bf0c      	ite	eq
 8004660:	f8c8 2000 	streq.w	r2, [r8]
 8004664:	605a      	strne	r2, [r3, #4]
 8004666:	e7eb      	b.n	8004640 <_malloc_r+0xa8>
 8004668:	4623      	mov	r3, r4
 800466a:	6864      	ldr	r4, [r4, #4]
 800466c:	e7ae      	b.n	80045cc <_malloc_r+0x34>
 800466e:	463c      	mov	r4, r7
 8004670:	687f      	ldr	r7, [r7, #4]
 8004672:	e7b6      	b.n	80045e2 <_malloc_r+0x4a>
 8004674:	461a      	mov	r2, r3
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	42a3      	cmp	r3, r4
 800467a:	d1fb      	bne.n	8004674 <_malloc_r+0xdc>
 800467c:	2300      	movs	r3, #0
 800467e:	6053      	str	r3, [r2, #4]
 8004680:	e7de      	b.n	8004640 <_malloc_r+0xa8>
 8004682:	230c      	movs	r3, #12
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	4630      	mov	r0, r6
 8004688:	f000 f8b8 	bl	80047fc <__malloc_unlock>
 800468c:	e794      	b.n	80045b8 <_malloc_r+0x20>
 800468e:	6005      	str	r5, [r0, #0]
 8004690:	e7d6      	b.n	8004640 <_malloc_r+0xa8>
 8004692:	bf00      	nop
 8004694:	2000030c 	.word	0x2000030c

08004698 <__sflush_r>:
 8004698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	0716      	lsls	r6, r2, #28
 80046a2:	4605      	mov	r5, r0
 80046a4:	460c      	mov	r4, r1
 80046a6:	d454      	bmi.n	8004752 <__sflush_r+0xba>
 80046a8:	684b      	ldr	r3, [r1, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	dc02      	bgt.n	80046b4 <__sflush_r+0x1c>
 80046ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	dd48      	ble.n	8004746 <__sflush_r+0xae>
 80046b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046b6:	2e00      	cmp	r6, #0
 80046b8:	d045      	beq.n	8004746 <__sflush_r+0xae>
 80046ba:	2300      	movs	r3, #0
 80046bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046c0:	682f      	ldr	r7, [r5, #0]
 80046c2:	6a21      	ldr	r1, [r4, #32]
 80046c4:	602b      	str	r3, [r5, #0]
 80046c6:	d030      	beq.n	800472a <__sflush_r+0x92>
 80046c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	0759      	lsls	r1, r3, #29
 80046ce:	d505      	bpl.n	80046dc <__sflush_r+0x44>
 80046d0:	6863      	ldr	r3, [r4, #4]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046d6:	b10b      	cbz	r3, 80046dc <__sflush_r+0x44>
 80046d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046da:	1ad2      	subs	r2, r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046e0:	6a21      	ldr	r1, [r4, #32]
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b0      	blx	r6
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	d106      	bne.n	80046fa <__sflush_r+0x62>
 80046ec:	6829      	ldr	r1, [r5, #0]
 80046ee:	291d      	cmp	r1, #29
 80046f0:	d82b      	bhi.n	800474a <__sflush_r+0xb2>
 80046f2:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <__sflush_r+0x104>)
 80046f4:	40ca      	lsrs	r2, r1
 80046f6:	07d6      	lsls	r6, r2, #31
 80046f8:	d527      	bpl.n	800474a <__sflush_r+0xb2>
 80046fa:	2200      	movs	r2, #0
 80046fc:	6062      	str	r2, [r4, #4]
 80046fe:	04d9      	lsls	r1, r3, #19
 8004700:	6922      	ldr	r2, [r4, #16]
 8004702:	6022      	str	r2, [r4, #0]
 8004704:	d504      	bpl.n	8004710 <__sflush_r+0x78>
 8004706:	1c42      	adds	r2, r0, #1
 8004708:	d101      	bne.n	800470e <__sflush_r+0x76>
 800470a:	682b      	ldr	r3, [r5, #0]
 800470c:	b903      	cbnz	r3, 8004710 <__sflush_r+0x78>
 800470e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004712:	602f      	str	r7, [r5, #0]
 8004714:	b1b9      	cbz	r1, 8004746 <__sflush_r+0xae>
 8004716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800471a:	4299      	cmp	r1, r3
 800471c:	d002      	beq.n	8004724 <__sflush_r+0x8c>
 800471e:	4628      	mov	r0, r5
 8004720:	f000 f926 	bl	8004970 <_free_r>
 8004724:	2300      	movs	r3, #0
 8004726:	6363      	str	r3, [r4, #52]	@ 0x34
 8004728:	e00d      	b.n	8004746 <__sflush_r+0xae>
 800472a:	2301      	movs	r3, #1
 800472c:	4628      	mov	r0, r5
 800472e:	47b0      	blx	r6
 8004730:	4602      	mov	r2, r0
 8004732:	1c50      	adds	r0, r2, #1
 8004734:	d1c9      	bne.n	80046ca <__sflush_r+0x32>
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0c6      	beq.n	80046ca <__sflush_r+0x32>
 800473c:	2b1d      	cmp	r3, #29
 800473e:	d001      	beq.n	8004744 <__sflush_r+0xac>
 8004740:	2b16      	cmp	r3, #22
 8004742:	d11e      	bne.n	8004782 <__sflush_r+0xea>
 8004744:	602f      	str	r7, [r5, #0]
 8004746:	2000      	movs	r0, #0
 8004748:	e022      	b.n	8004790 <__sflush_r+0xf8>
 800474a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474e:	b21b      	sxth	r3, r3
 8004750:	e01b      	b.n	800478a <__sflush_r+0xf2>
 8004752:	690f      	ldr	r7, [r1, #16]
 8004754:	2f00      	cmp	r7, #0
 8004756:	d0f6      	beq.n	8004746 <__sflush_r+0xae>
 8004758:	0793      	lsls	r3, r2, #30
 800475a:	680e      	ldr	r6, [r1, #0]
 800475c:	bf08      	it	eq
 800475e:	694b      	ldreq	r3, [r1, #20]
 8004760:	600f      	str	r7, [r1, #0]
 8004762:	bf18      	it	ne
 8004764:	2300      	movne	r3, #0
 8004766:	eba6 0807 	sub.w	r8, r6, r7
 800476a:	608b      	str	r3, [r1, #8]
 800476c:	f1b8 0f00 	cmp.w	r8, #0
 8004770:	dde9      	ble.n	8004746 <__sflush_r+0xae>
 8004772:	6a21      	ldr	r1, [r4, #32]
 8004774:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004776:	4643      	mov	r3, r8
 8004778:	463a      	mov	r2, r7
 800477a:	4628      	mov	r0, r5
 800477c:	47b0      	blx	r6
 800477e:	2800      	cmp	r0, #0
 8004780:	dc08      	bgt.n	8004794 <__sflush_r+0xfc>
 8004782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800478a:	81a3      	strh	r3, [r4, #12]
 800478c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	4407      	add	r7, r0
 8004796:	eba8 0800 	sub.w	r8, r8, r0
 800479a:	e7e7      	b.n	800476c <__sflush_r+0xd4>
 800479c:	20400001 	.word	0x20400001

080047a0 <_fflush_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	690b      	ldr	r3, [r1, #16]
 80047a4:	4605      	mov	r5, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	b913      	cbnz	r3, 80047b0 <_fflush_r+0x10>
 80047aa:	2500      	movs	r5, #0
 80047ac:	4628      	mov	r0, r5
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	b118      	cbz	r0, 80047ba <_fflush_r+0x1a>
 80047b2:	6a03      	ldr	r3, [r0, #32]
 80047b4:	b90b      	cbnz	r3, 80047ba <_fflush_r+0x1a>
 80047b6:	f7ff fe3b 	bl	8004430 <__sinit>
 80047ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f3      	beq.n	80047aa <_fflush_r+0xa>
 80047c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047c4:	07d0      	lsls	r0, r2, #31
 80047c6:	d404      	bmi.n	80047d2 <_fflush_r+0x32>
 80047c8:	0599      	lsls	r1, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_fflush_r+0x32>
 80047cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ce:	f7ff fe98 	bl	8004502 <__retarget_lock_acquire_recursive>
 80047d2:	4628      	mov	r0, r5
 80047d4:	4621      	mov	r1, r4
 80047d6:	f7ff ff5f 	bl	8004698 <__sflush_r>
 80047da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047dc:	07da      	lsls	r2, r3, #31
 80047de:	4605      	mov	r5, r0
 80047e0:	d4e4      	bmi.n	80047ac <_fflush_r+0xc>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	059b      	lsls	r3, r3, #22
 80047e6:	d4e1      	bmi.n	80047ac <_fflush_r+0xc>
 80047e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ea:	f7ff fe8b 	bl	8004504 <__retarget_lock_release_recursive>
 80047ee:	e7dd      	b.n	80047ac <_fflush_r+0xc>

080047f0 <__malloc_lock>:
 80047f0:	4801      	ldr	r0, [pc, #4]	@ (80047f8 <__malloc_lock+0x8>)
 80047f2:	f7ff be86 	b.w	8004502 <__retarget_lock_acquire_recursive>
 80047f6:	bf00      	nop
 80047f8:	20000304 	.word	0x20000304

080047fc <__malloc_unlock>:
 80047fc:	4801      	ldr	r0, [pc, #4]	@ (8004804 <__malloc_unlock+0x8>)
 80047fe:	f7ff be81 	b.w	8004504 <__retarget_lock_release_recursive>
 8004802:	bf00      	nop
 8004804:	20000304 	.word	0x20000304

08004808 <__sread>:
 8004808:	b510      	push	{r4, lr}
 800480a:	460c      	mov	r4, r1
 800480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004810:	f000 f862 	bl	80048d8 <_read_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	bfab      	itete	ge
 8004818:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800481a:	89a3      	ldrhlt	r3, [r4, #12]
 800481c:	181b      	addge	r3, r3, r0
 800481e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004822:	bfac      	ite	ge
 8004824:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004826:	81a3      	strhlt	r3, [r4, #12]
 8004828:	bd10      	pop	{r4, pc}

0800482a <__swrite>:
 800482a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482e:	461f      	mov	r7, r3
 8004830:	898b      	ldrh	r3, [r1, #12]
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	4605      	mov	r5, r0
 8004836:	460c      	mov	r4, r1
 8004838:	4616      	mov	r6, r2
 800483a:	d505      	bpl.n	8004848 <__swrite+0x1e>
 800483c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004840:	2302      	movs	r3, #2
 8004842:	2200      	movs	r2, #0
 8004844:	f000 f836 	bl	80048b4 <_lseek_r>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800484e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	4632      	mov	r2, r6
 8004856:	463b      	mov	r3, r7
 8004858:	4628      	mov	r0, r5
 800485a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800485e:	f000 b85d 	b.w	800491c <_write_r>

08004862 <__sseek>:
 8004862:	b510      	push	{r4, lr}
 8004864:	460c      	mov	r4, r1
 8004866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486a:	f000 f823 	bl	80048b4 <_lseek_r>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	bf15      	itete	ne
 8004874:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004876:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800487a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800487e:	81a3      	strheq	r3, [r4, #12]
 8004880:	bf18      	it	ne
 8004882:	81a3      	strhne	r3, [r4, #12]
 8004884:	bd10      	pop	{r4, pc}

08004886 <__sclose>:
 8004886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488a:	f000 b859 	b.w	8004940 <_close_r>
	...

08004890 <fiprintf>:
 8004890:	b40e      	push	{r1, r2, r3}
 8004892:	b503      	push	{r0, r1, lr}
 8004894:	4601      	mov	r1, r0
 8004896:	ab03      	add	r3, sp, #12
 8004898:	4805      	ldr	r0, [pc, #20]	@ (80048b0 <fiprintf+0x20>)
 800489a:	f853 2b04 	ldr.w	r2, [r3], #4
 800489e:	6800      	ldr	r0, [r0, #0]
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	f000 f8d9 	bl	8004a58 <_vfiprintf_r>
 80048a6:	b002      	add	sp, #8
 80048a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048ac:	b003      	add	sp, #12
 80048ae:	4770      	bx	lr
 80048b0:	2000001c 	.word	0x2000001c

080048b4 <_lseek_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4d07      	ldr	r5, [pc, #28]	@ (80048d4 <_lseek_r+0x20>)
 80048b8:	4604      	mov	r4, r0
 80048ba:	4608      	mov	r0, r1
 80048bc:	4611      	mov	r1, r2
 80048be:	2200      	movs	r2, #0
 80048c0:	602a      	str	r2, [r5, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f7fd fb70 	bl	8001fa8 <_lseek>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_lseek_r+0x1e>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_lseek_r+0x1e>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	20000310 	.word	0x20000310

080048d8 <_read_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d07      	ldr	r5, [pc, #28]	@ (80048f8 <_read_r+0x20>)
 80048dc:	4604      	mov	r4, r0
 80048de:	4608      	mov	r0, r1
 80048e0:	4611      	mov	r1, r2
 80048e2:	2200      	movs	r2, #0
 80048e4:	602a      	str	r2, [r5, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7fd fafe 	bl	8001ee8 <_read>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_read_r+0x1e>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_read_r+0x1e>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	20000310 	.word	0x20000310

080048fc <_sbrk_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d06      	ldr	r5, [pc, #24]	@ (8004918 <_sbrk_r+0x1c>)
 8004900:	2300      	movs	r3, #0
 8004902:	4604      	mov	r4, r0
 8004904:	4608      	mov	r0, r1
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	f7fd fb5c 	bl	8001fc4 <_sbrk>
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d102      	bne.n	8004916 <_sbrk_r+0x1a>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	b103      	cbz	r3, 8004916 <_sbrk_r+0x1a>
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	20000310 	.word	0x20000310

0800491c <_write_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4d07      	ldr	r5, [pc, #28]	@ (800493c <_write_r+0x20>)
 8004920:	4604      	mov	r4, r0
 8004922:	4608      	mov	r0, r1
 8004924:	4611      	mov	r1, r2
 8004926:	2200      	movs	r2, #0
 8004928:	602a      	str	r2, [r5, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f7fd faf9 	bl	8001f22 <_write>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_write_r+0x1e>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	b103      	cbz	r3, 800493a <_write_r+0x1e>
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	20000310 	.word	0x20000310

08004940 <_close_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4d06      	ldr	r5, [pc, #24]	@ (800495c <_close_r+0x1c>)
 8004944:	2300      	movs	r3, #0
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	f7fd fb05 	bl	8001f5a <_close>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_close_r+0x1a>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	b103      	cbz	r3, 800495a <_close_r+0x1a>
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	20000310 	.word	0x20000310

08004960 <abort>:
 8004960:	b508      	push	{r3, lr}
 8004962:	2006      	movs	r0, #6
 8004964:	f000 fc3a 	bl	80051dc <raise>
 8004968:	2001      	movs	r0, #1
 800496a:	f7fd fab2 	bl	8001ed2 <_exit>
	...

08004970 <_free_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4605      	mov	r5, r0
 8004974:	2900      	cmp	r1, #0
 8004976:	d041      	beq.n	80049fc <_free_r+0x8c>
 8004978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800497c:	1f0c      	subs	r4, r1, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfb8      	it	lt
 8004982:	18e4      	addlt	r4, r4, r3
 8004984:	f7ff ff34 	bl	80047f0 <__malloc_lock>
 8004988:	4a1d      	ldr	r2, [pc, #116]	@ (8004a00 <_free_r+0x90>)
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	b933      	cbnz	r3, 800499c <_free_r+0x2c>
 800498e:	6063      	str	r3, [r4, #4]
 8004990:	6014      	str	r4, [r2, #0]
 8004992:	4628      	mov	r0, r5
 8004994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004998:	f7ff bf30 	b.w	80047fc <__malloc_unlock>
 800499c:	42a3      	cmp	r3, r4
 800499e:	d908      	bls.n	80049b2 <_free_r+0x42>
 80049a0:	6820      	ldr	r0, [r4, #0]
 80049a2:	1821      	adds	r1, r4, r0
 80049a4:	428b      	cmp	r3, r1
 80049a6:	bf01      	itttt	eq
 80049a8:	6819      	ldreq	r1, [r3, #0]
 80049aa:	685b      	ldreq	r3, [r3, #4]
 80049ac:	1809      	addeq	r1, r1, r0
 80049ae:	6021      	streq	r1, [r4, #0]
 80049b0:	e7ed      	b.n	800498e <_free_r+0x1e>
 80049b2:	461a      	mov	r2, r3
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	b10b      	cbz	r3, 80049bc <_free_r+0x4c>
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	d9fa      	bls.n	80049b2 <_free_r+0x42>
 80049bc:	6811      	ldr	r1, [r2, #0]
 80049be:	1850      	adds	r0, r2, r1
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	d10b      	bne.n	80049dc <_free_r+0x6c>
 80049c4:	6820      	ldr	r0, [r4, #0]
 80049c6:	4401      	add	r1, r0
 80049c8:	1850      	adds	r0, r2, r1
 80049ca:	4283      	cmp	r3, r0
 80049cc:	6011      	str	r1, [r2, #0]
 80049ce:	d1e0      	bne.n	8004992 <_free_r+0x22>
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	6053      	str	r3, [r2, #4]
 80049d6:	4408      	add	r0, r1
 80049d8:	6010      	str	r0, [r2, #0]
 80049da:	e7da      	b.n	8004992 <_free_r+0x22>
 80049dc:	d902      	bls.n	80049e4 <_free_r+0x74>
 80049de:	230c      	movs	r3, #12
 80049e0:	602b      	str	r3, [r5, #0]
 80049e2:	e7d6      	b.n	8004992 <_free_r+0x22>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	1821      	adds	r1, r4, r0
 80049e8:	428b      	cmp	r3, r1
 80049ea:	bf04      	itt	eq
 80049ec:	6819      	ldreq	r1, [r3, #0]
 80049ee:	685b      	ldreq	r3, [r3, #4]
 80049f0:	6063      	str	r3, [r4, #4]
 80049f2:	bf04      	itt	eq
 80049f4:	1809      	addeq	r1, r1, r0
 80049f6:	6021      	streq	r1, [r4, #0]
 80049f8:	6054      	str	r4, [r2, #4]
 80049fa:	e7ca      	b.n	8004992 <_free_r+0x22>
 80049fc:	bd38      	pop	{r3, r4, r5, pc}
 80049fe:	bf00      	nop
 8004a00:	2000030c 	.word	0x2000030c

08004a04 <__sfputc_r>:
 8004a04:	6893      	ldr	r3, [r2, #8]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	b410      	push	{r4}
 8004a0c:	6093      	str	r3, [r2, #8]
 8004a0e:	da08      	bge.n	8004a22 <__sfputc_r+0x1e>
 8004a10:	6994      	ldr	r4, [r2, #24]
 8004a12:	42a3      	cmp	r3, r4
 8004a14:	db01      	blt.n	8004a1a <__sfputc_r+0x16>
 8004a16:	290a      	cmp	r1, #10
 8004a18:	d103      	bne.n	8004a22 <__sfputc_r+0x1e>
 8004a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a1e:	f000 babf 	b.w	8004fa0 <__swbuf_r>
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	1c58      	adds	r0, r3, #1
 8004a26:	6010      	str	r0, [r2, #0]
 8004a28:	7019      	strb	r1, [r3, #0]
 8004a2a:	4608      	mov	r0, r1
 8004a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <__sfputs_r>:
 8004a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a34:	4606      	mov	r6, r0
 8004a36:	460f      	mov	r7, r1
 8004a38:	4614      	mov	r4, r2
 8004a3a:	18d5      	adds	r5, r2, r3
 8004a3c:	42ac      	cmp	r4, r5
 8004a3e:	d101      	bne.n	8004a44 <__sfputs_r+0x12>
 8004a40:	2000      	movs	r0, #0
 8004a42:	e007      	b.n	8004a54 <__sfputs_r+0x22>
 8004a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a48:	463a      	mov	r2, r7
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7ff ffda 	bl	8004a04 <__sfputc_r>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	d1f3      	bne.n	8004a3c <__sfputs_r+0xa>
 8004a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a58 <_vfiprintf_r>:
 8004a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	b09d      	sub	sp, #116	@ 0x74
 8004a60:	4614      	mov	r4, r2
 8004a62:	4698      	mov	r8, r3
 8004a64:	4606      	mov	r6, r0
 8004a66:	b118      	cbz	r0, 8004a70 <_vfiprintf_r+0x18>
 8004a68:	6a03      	ldr	r3, [r0, #32]
 8004a6a:	b90b      	cbnz	r3, 8004a70 <_vfiprintf_r+0x18>
 8004a6c:	f7ff fce0 	bl	8004430 <__sinit>
 8004a70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a72:	07d9      	lsls	r1, r3, #31
 8004a74:	d405      	bmi.n	8004a82 <_vfiprintf_r+0x2a>
 8004a76:	89ab      	ldrh	r3, [r5, #12]
 8004a78:	059a      	lsls	r2, r3, #22
 8004a7a:	d402      	bmi.n	8004a82 <_vfiprintf_r+0x2a>
 8004a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a7e:	f7ff fd40 	bl	8004502 <__retarget_lock_acquire_recursive>
 8004a82:	89ab      	ldrh	r3, [r5, #12]
 8004a84:	071b      	lsls	r3, r3, #28
 8004a86:	d501      	bpl.n	8004a8c <_vfiprintf_r+0x34>
 8004a88:	692b      	ldr	r3, [r5, #16]
 8004a8a:	b99b      	cbnz	r3, 8004ab4 <_vfiprintf_r+0x5c>
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f000 fac4 	bl	800501c <__swsetup_r>
 8004a94:	b170      	cbz	r0, 8004ab4 <_vfiprintf_r+0x5c>
 8004a96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a98:	07dc      	lsls	r4, r3, #31
 8004a9a:	d504      	bpl.n	8004aa6 <_vfiprintf_r+0x4e>
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aa0:	b01d      	add	sp, #116	@ 0x74
 8004aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa6:	89ab      	ldrh	r3, [r5, #12]
 8004aa8:	0598      	lsls	r0, r3, #22
 8004aaa:	d4f7      	bmi.n	8004a9c <_vfiprintf_r+0x44>
 8004aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aae:	f7ff fd29 	bl	8004504 <__retarget_lock_release_recursive>
 8004ab2:	e7f3      	b.n	8004a9c <_vfiprintf_r+0x44>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ac2:	2330      	movs	r3, #48	@ 0x30
 8004ac4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c74 <_vfiprintf_r+0x21c>
 8004ac8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004acc:	f04f 0901 	mov.w	r9, #1
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	469a      	mov	sl, r3
 8004ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad8:	b10a      	cbz	r2, 8004ade <_vfiprintf_r+0x86>
 8004ada:	2a25      	cmp	r2, #37	@ 0x25
 8004adc:	d1f9      	bne.n	8004ad2 <_vfiprintf_r+0x7a>
 8004ade:	ebba 0b04 	subs.w	fp, sl, r4
 8004ae2:	d00b      	beq.n	8004afc <_vfiprintf_r+0xa4>
 8004ae4:	465b      	mov	r3, fp
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ffa1 	bl	8004a32 <__sfputs_r>
 8004af0:	3001      	adds	r0, #1
 8004af2:	f000 80a7 	beq.w	8004c44 <_vfiprintf_r+0x1ec>
 8004af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004af8:	445a      	add	r2, fp
 8004afa:	9209      	str	r2, [sp, #36]	@ 0x24
 8004afc:	f89a 3000 	ldrb.w	r3, [sl]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 809f 	beq.w	8004c44 <_vfiprintf_r+0x1ec>
 8004b06:	2300      	movs	r3, #0
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b10:	f10a 0a01 	add.w	sl, sl, #1
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	9307      	str	r3, [sp, #28]
 8004b18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b1e:	4654      	mov	r4, sl
 8004b20:	2205      	movs	r2, #5
 8004b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b26:	4853      	ldr	r0, [pc, #332]	@ (8004c74 <_vfiprintf_r+0x21c>)
 8004b28:	f7fb fb5a 	bl	80001e0 <memchr>
 8004b2c:	9a04      	ldr	r2, [sp, #16]
 8004b2e:	b9d8      	cbnz	r0, 8004b68 <_vfiprintf_r+0x110>
 8004b30:	06d1      	lsls	r1, r2, #27
 8004b32:	bf44      	itt	mi
 8004b34:	2320      	movmi	r3, #32
 8004b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b3a:	0713      	lsls	r3, r2, #28
 8004b3c:	bf44      	itt	mi
 8004b3e:	232b      	movmi	r3, #43	@ 0x2b
 8004b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b44:	f89a 3000 	ldrb.w	r3, [sl]
 8004b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b4a:	d015      	beq.n	8004b78 <_vfiprintf_r+0x120>
 8004b4c:	9a07      	ldr	r2, [sp, #28]
 8004b4e:	4654      	mov	r4, sl
 8004b50:	2000      	movs	r0, #0
 8004b52:	f04f 0c0a 	mov.w	ip, #10
 8004b56:	4621      	mov	r1, r4
 8004b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b5c:	3b30      	subs	r3, #48	@ 0x30
 8004b5e:	2b09      	cmp	r3, #9
 8004b60:	d94b      	bls.n	8004bfa <_vfiprintf_r+0x1a2>
 8004b62:	b1b0      	cbz	r0, 8004b92 <_vfiprintf_r+0x13a>
 8004b64:	9207      	str	r2, [sp, #28]
 8004b66:	e014      	b.n	8004b92 <_vfiprintf_r+0x13a>
 8004b68:	eba0 0308 	sub.w	r3, r0, r8
 8004b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b70:	4313      	orrs	r3, r2
 8004b72:	9304      	str	r3, [sp, #16]
 8004b74:	46a2      	mov	sl, r4
 8004b76:	e7d2      	b.n	8004b1e <_vfiprintf_r+0xc6>
 8004b78:	9b03      	ldr	r3, [sp, #12]
 8004b7a:	1d19      	adds	r1, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	9103      	str	r1, [sp, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bfbb      	ittet	lt
 8004b84:	425b      	neglt	r3, r3
 8004b86:	f042 0202 	orrlt.w	r2, r2, #2
 8004b8a:	9307      	strge	r3, [sp, #28]
 8004b8c:	9307      	strlt	r3, [sp, #28]
 8004b8e:	bfb8      	it	lt
 8004b90:	9204      	strlt	r2, [sp, #16]
 8004b92:	7823      	ldrb	r3, [r4, #0]
 8004b94:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b96:	d10a      	bne.n	8004bae <_vfiprintf_r+0x156>
 8004b98:	7863      	ldrb	r3, [r4, #1]
 8004b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b9c:	d132      	bne.n	8004c04 <_vfiprintf_r+0x1ac>
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	9203      	str	r2, [sp, #12]
 8004ba6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004baa:	3402      	adds	r4, #2
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c84 <_vfiprintf_r+0x22c>
 8004bb2:	7821      	ldrb	r1, [r4, #0]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	4650      	mov	r0, sl
 8004bb8:	f7fb fb12 	bl	80001e0 <memchr>
 8004bbc:	b138      	cbz	r0, 8004bce <_vfiprintf_r+0x176>
 8004bbe:	9b04      	ldr	r3, [sp, #16]
 8004bc0:	eba0 000a 	sub.w	r0, r0, sl
 8004bc4:	2240      	movs	r2, #64	@ 0x40
 8004bc6:	4082      	lsls	r2, r0
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	3401      	adds	r4, #1
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd2:	4829      	ldr	r0, [pc, #164]	@ (8004c78 <_vfiprintf_r+0x220>)
 8004bd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bd8:	2206      	movs	r2, #6
 8004bda:	f7fb fb01 	bl	80001e0 <memchr>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d03f      	beq.n	8004c62 <_vfiprintf_r+0x20a>
 8004be2:	4b26      	ldr	r3, [pc, #152]	@ (8004c7c <_vfiprintf_r+0x224>)
 8004be4:	bb1b      	cbnz	r3, 8004c2e <_vfiprintf_r+0x1d6>
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	3307      	adds	r3, #7
 8004bea:	f023 0307 	bic.w	r3, r3, #7
 8004bee:	3308      	adds	r3, #8
 8004bf0:	9303      	str	r3, [sp, #12]
 8004bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf4:	443b      	add	r3, r7
 8004bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bf8:	e76a      	b.n	8004ad0 <_vfiprintf_r+0x78>
 8004bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bfe:	460c      	mov	r4, r1
 8004c00:	2001      	movs	r0, #1
 8004c02:	e7a8      	b.n	8004b56 <_vfiprintf_r+0xfe>
 8004c04:	2300      	movs	r3, #0
 8004c06:	3401      	adds	r4, #1
 8004c08:	9305      	str	r3, [sp, #20]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f04f 0c0a 	mov.w	ip, #10
 8004c10:	4620      	mov	r0, r4
 8004c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c16:	3a30      	subs	r2, #48	@ 0x30
 8004c18:	2a09      	cmp	r2, #9
 8004c1a:	d903      	bls.n	8004c24 <_vfiprintf_r+0x1cc>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0c6      	beq.n	8004bae <_vfiprintf_r+0x156>
 8004c20:	9105      	str	r1, [sp, #20]
 8004c22:	e7c4      	b.n	8004bae <_vfiprintf_r+0x156>
 8004c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c28:	4604      	mov	r4, r0
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7f0      	b.n	8004c10 <_vfiprintf_r+0x1b8>
 8004c2e:	ab03      	add	r3, sp, #12
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	462a      	mov	r2, r5
 8004c34:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <_vfiprintf_r+0x228>)
 8004c36:	a904      	add	r1, sp, #16
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f3af 8000 	nop.w
 8004c3e:	4607      	mov	r7, r0
 8004c40:	1c78      	adds	r0, r7, #1
 8004c42:	d1d6      	bne.n	8004bf2 <_vfiprintf_r+0x19a>
 8004c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c46:	07d9      	lsls	r1, r3, #31
 8004c48:	d405      	bmi.n	8004c56 <_vfiprintf_r+0x1fe>
 8004c4a:	89ab      	ldrh	r3, [r5, #12]
 8004c4c:	059a      	lsls	r2, r3, #22
 8004c4e:	d402      	bmi.n	8004c56 <_vfiprintf_r+0x1fe>
 8004c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c52:	f7ff fc57 	bl	8004504 <__retarget_lock_release_recursive>
 8004c56:	89ab      	ldrh	r3, [r5, #12]
 8004c58:	065b      	lsls	r3, r3, #25
 8004c5a:	f53f af1f 	bmi.w	8004a9c <_vfiprintf_r+0x44>
 8004c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c60:	e71e      	b.n	8004aa0 <_vfiprintf_r+0x48>
 8004c62:	ab03      	add	r3, sp, #12
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	462a      	mov	r2, r5
 8004c68:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <_vfiprintf_r+0x228>)
 8004c6a:	a904      	add	r1, sp, #16
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 f879 	bl	8004d64 <_printf_i>
 8004c72:	e7e4      	b.n	8004c3e <_vfiprintf_r+0x1e6>
 8004c74:	0807acff 	.word	0x0807acff
 8004c78:	0807ad09 	.word	0x0807ad09
 8004c7c:	00000000 	.word	0x00000000
 8004c80:	08004a33 	.word	0x08004a33
 8004c84:	0807ad05 	.word	0x0807ad05

08004c88 <_printf_common>:
 8004c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	4698      	mov	r8, r3
 8004c90:	688a      	ldr	r2, [r1, #8]
 8004c92:	690b      	ldr	r3, [r1, #16]
 8004c94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bfb8      	it	lt
 8004c9c:	4613      	movlt	r3, r2
 8004c9e:	6033      	str	r3, [r6, #0]
 8004ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	b10a      	cbz	r2, 8004cae <_printf_common+0x26>
 8004caa:	3301      	adds	r3, #1
 8004cac:	6033      	str	r3, [r6, #0]
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	0699      	lsls	r1, r3, #26
 8004cb2:	bf42      	ittt	mi
 8004cb4:	6833      	ldrmi	r3, [r6, #0]
 8004cb6:	3302      	addmi	r3, #2
 8004cb8:	6033      	strmi	r3, [r6, #0]
 8004cba:	6825      	ldr	r5, [r4, #0]
 8004cbc:	f015 0506 	ands.w	r5, r5, #6
 8004cc0:	d106      	bne.n	8004cd0 <_printf_common+0x48>
 8004cc2:	f104 0a19 	add.w	sl, r4, #25
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	6832      	ldr	r2, [r6, #0]
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	42ab      	cmp	r3, r5
 8004cce:	dc26      	bgt.n	8004d1e <_printf_common+0x96>
 8004cd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cd4:	6822      	ldr	r2, [r4, #0]
 8004cd6:	3b00      	subs	r3, #0
 8004cd8:	bf18      	it	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	0692      	lsls	r2, r2, #26
 8004cde:	d42b      	bmi.n	8004d38 <_printf_common+0xb0>
 8004ce0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ce4:	4641      	mov	r1, r8
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	47c8      	blx	r9
 8004cea:	3001      	adds	r0, #1
 8004cec:	d01e      	beq.n	8004d2c <_printf_common+0xa4>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	6922      	ldr	r2, [r4, #16]
 8004cf2:	f003 0306 	and.w	r3, r3, #6
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	bf02      	ittt	eq
 8004cfa:	68e5      	ldreq	r5, [r4, #12]
 8004cfc:	6833      	ldreq	r3, [r6, #0]
 8004cfe:	1aed      	subeq	r5, r5, r3
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	bf0c      	ite	eq
 8004d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d08:	2500      	movne	r5, #0
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	bfc4      	itt	gt
 8004d0e:	1a9b      	subgt	r3, r3, r2
 8004d10:	18ed      	addgt	r5, r5, r3
 8004d12:	2600      	movs	r6, #0
 8004d14:	341a      	adds	r4, #26
 8004d16:	42b5      	cmp	r5, r6
 8004d18:	d11a      	bne.n	8004d50 <_printf_common+0xc8>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e008      	b.n	8004d30 <_printf_common+0xa8>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4652      	mov	r2, sl
 8004d22:	4641      	mov	r1, r8
 8004d24:	4638      	mov	r0, r7
 8004d26:	47c8      	blx	r9
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d103      	bne.n	8004d34 <_printf_common+0xac>
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d34:	3501      	adds	r5, #1
 8004d36:	e7c6      	b.n	8004cc6 <_printf_common+0x3e>
 8004d38:	18e1      	adds	r1, r4, r3
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	2030      	movs	r0, #48	@ 0x30
 8004d3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d42:	4422      	add	r2, r4
 8004d44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	e7c7      	b.n	8004ce0 <_printf_common+0x58>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4622      	mov	r2, r4
 8004d54:	4641      	mov	r1, r8
 8004d56:	4638      	mov	r0, r7
 8004d58:	47c8      	blx	r9
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d0e6      	beq.n	8004d2c <_printf_common+0xa4>
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7d9      	b.n	8004d16 <_printf_common+0x8e>
	...

08004d64 <_printf_i>:
 8004d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	7e0f      	ldrb	r7, [r1, #24]
 8004d6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d6c:	2f78      	cmp	r7, #120	@ 0x78
 8004d6e:	4691      	mov	r9, r2
 8004d70:	4680      	mov	r8, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	469a      	mov	sl, r3
 8004d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d7a:	d807      	bhi.n	8004d8c <_printf_i+0x28>
 8004d7c:	2f62      	cmp	r7, #98	@ 0x62
 8004d7e:	d80a      	bhi.n	8004d96 <_printf_i+0x32>
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	f000 80d1 	beq.w	8004f28 <_printf_i+0x1c4>
 8004d86:	2f58      	cmp	r7, #88	@ 0x58
 8004d88:	f000 80b8 	beq.w	8004efc <_printf_i+0x198>
 8004d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d94:	e03a      	b.n	8004e0c <_printf_i+0xa8>
 8004d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d9a:	2b15      	cmp	r3, #21
 8004d9c:	d8f6      	bhi.n	8004d8c <_printf_i+0x28>
 8004d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004da4 <_printf_i+0x40>)
 8004da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da4:	08004dfd 	.word	0x08004dfd
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004d8d 	.word	0x08004d8d
 8004db0:	08004d8d 	.word	0x08004d8d
 8004db4:	08004d8d 	.word	0x08004d8d
 8004db8:	08004d8d 	.word	0x08004d8d
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004d8d 	.word	0x08004d8d
 8004dc4:	08004d8d 	.word	0x08004d8d
 8004dc8:	08004d8d 	.word	0x08004d8d
 8004dcc:	08004d8d 	.word	0x08004d8d
 8004dd0:	08004f0f 	.word	0x08004f0f
 8004dd4:	08004e3b 	.word	0x08004e3b
 8004dd8:	08004ec9 	.word	0x08004ec9
 8004ddc:	08004d8d 	.word	0x08004d8d
 8004de0:	08004d8d 	.word	0x08004d8d
 8004de4:	08004f31 	.word	0x08004f31
 8004de8:	08004d8d 	.word	0x08004d8d
 8004dec:	08004e3b 	.word	0x08004e3b
 8004df0:	08004d8d 	.word	0x08004d8d
 8004df4:	08004d8d 	.word	0x08004d8d
 8004df8:	08004ed1 	.word	0x08004ed1
 8004dfc:	6833      	ldr	r3, [r6, #0]
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6032      	str	r2, [r6, #0]
 8004e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e09c      	b.n	8004f4a <_printf_i+0x1e6>
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	6820      	ldr	r0, [r4, #0]
 8004e14:	1d19      	adds	r1, r3, #4
 8004e16:	6031      	str	r1, [r6, #0]
 8004e18:	0606      	lsls	r6, r0, #24
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0xbc>
 8004e1c:	681d      	ldr	r5, [r3, #0]
 8004e1e:	e003      	b.n	8004e28 <_printf_i+0xc4>
 8004e20:	0645      	lsls	r5, r0, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0xb8>
 8004e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	da03      	bge.n	8004e34 <_printf_i+0xd0>
 8004e2c:	232d      	movs	r3, #45	@ 0x2d
 8004e2e:	426d      	negs	r5, r5
 8004e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e34:	4858      	ldr	r0, [pc, #352]	@ (8004f98 <_printf_i+0x234>)
 8004e36:	230a      	movs	r3, #10
 8004e38:	e011      	b.n	8004e5e <_printf_i+0xfa>
 8004e3a:	6821      	ldr	r1, [r4, #0]
 8004e3c:	6833      	ldr	r3, [r6, #0]
 8004e3e:	0608      	lsls	r0, r1, #24
 8004e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e44:	d402      	bmi.n	8004e4c <_printf_i+0xe8>
 8004e46:	0649      	lsls	r1, r1, #25
 8004e48:	bf48      	it	mi
 8004e4a:	b2ad      	uxthmi	r5, r5
 8004e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e4e:	4852      	ldr	r0, [pc, #328]	@ (8004f98 <_printf_i+0x234>)
 8004e50:	6033      	str	r3, [r6, #0]
 8004e52:	bf14      	ite	ne
 8004e54:	230a      	movne	r3, #10
 8004e56:	2308      	moveq	r3, #8
 8004e58:	2100      	movs	r1, #0
 8004e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e5e:	6866      	ldr	r6, [r4, #4]
 8004e60:	60a6      	str	r6, [r4, #8]
 8004e62:	2e00      	cmp	r6, #0
 8004e64:	db05      	blt.n	8004e72 <_printf_i+0x10e>
 8004e66:	6821      	ldr	r1, [r4, #0]
 8004e68:	432e      	orrs	r6, r5
 8004e6a:	f021 0104 	bic.w	r1, r1, #4
 8004e6e:	6021      	str	r1, [r4, #0]
 8004e70:	d04b      	beq.n	8004f0a <_printf_i+0x1a6>
 8004e72:	4616      	mov	r6, r2
 8004e74:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e78:	fb03 5711 	mls	r7, r3, r1, r5
 8004e7c:	5dc7      	ldrb	r7, [r0, r7]
 8004e7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e82:	462f      	mov	r7, r5
 8004e84:	42bb      	cmp	r3, r7
 8004e86:	460d      	mov	r5, r1
 8004e88:	d9f4      	bls.n	8004e74 <_printf_i+0x110>
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d10b      	bne.n	8004ea6 <_printf_i+0x142>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	07df      	lsls	r7, r3, #31
 8004e92:	d508      	bpl.n	8004ea6 <_printf_i+0x142>
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	6861      	ldr	r1, [r4, #4]
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	bfde      	ittt	le
 8004e9c:	2330      	movle	r3, #48	@ 0x30
 8004e9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ea2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004ea6:	1b92      	subs	r2, r2, r6
 8004ea8:	6122      	str	r2, [r4, #16]
 8004eaa:	f8cd a000 	str.w	sl, [sp]
 8004eae:	464b      	mov	r3, r9
 8004eb0:	aa03      	add	r2, sp, #12
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	f7ff fee7 	bl	8004c88 <_printf_common>
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d14a      	bne.n	8004f54 <_printf_i+0x1f0>
 8004ebe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ec2:	b004      	add	sp, #16
 8004ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	f043 0320 	orr.w	r3, r3, #32
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	4832      	ldr	r0, [pc, #200]	@ (8004f9c <_printf_i+0x238>)
 8004ed2:	2778      	movs	r7, #120	@ 0x78
 8004ed4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	6831      	ldr	r1, [r6, #0]
 8004edc:	061f      	lsls	r7, r3, #24
 8004ede:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ee2:	d402      	bmi.n	8004eea <_printf_i+0x186>
 8004ee4:	065f      	lsls	r7, r3, #25
 8004ee6:	bf48      	it	mi
 8004ee8:	b2ad      	uxthmi	r5, r5
 8004eea:	6031      	str	r1, [r6, #0]
 8004eec:	07d9      	lsls	r1, r3, #31
 8004eee:	bf44      	itt	mi
 8004ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef4:	6023      	strmi	r3, [r4, #0]
 8004ef6:	b11d      	cbz	r5, 8004f00 <_printf_i+0x19c>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	e7ad      	b.n	8004e58 <_printf_i+0xf4>
 8004efc:	4826      	ldr	r0, [pc, #152]	@ (8004f98 <_printf_i+0x234>)
 8004efe:	e7e9      	b.n	8004ed4 <_printf_i+0x170>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	e7f6      	b.n	8004ef8 <_printf_i+0x194>
 8004f0a:	4616      	mov	r6, r2
 8004f0c:	e7bd      	b.n	8004e8a <_printf_i+0x126>
 8004f0e:	6833      	ldr	r3, [r6, #0]
 8004f10:	6825      	ldr	r5, [r4, #0]
 8004f12:	6961      	ldr	r1, [r4, #20]
 8004f14:	1d18      	adds	r0, r3, #4
 8004f16:	6030      	str	r0, [r6, #0]
 8004f18:	062e      	lsls	r6, r5, #24
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	d501      	bpl.n	8004f22 <_printf_i+0x1be>
 8004f1e:	6019      	str	r1, [r3, #0]
 8004f20:	e002      	b.n	8004f28 <_printf_i+0x1c4>
 8004f22:	0668      	lsls	r0, r5, #25
 8004f24:	d5fb      	bpl.n	8004f1e <_printf_i+0x1ba>
 8004f26:	8019      	strh	r1, [r3, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6123      	str	r3, [r4, #16]
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	e7bc      	b.n	8004eaa <_printf_i+0x146>
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	1d1a      	adds	r2, r3, #4
 8004f34:	6032      	str	r2, [r6, #0]
 8004f36:	681e      	ldr	r6, [r3, #0]
 8004f38:	6862      	ldr	r2, [r4, #4]
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f7fb f94f 	bl	80001e0 <memchr>
 8004f42:	b108      	cbz	r0, 8004f48 <_printf_i+0x1e4>
 8004f44:	1b80      	subs	r0, r0, r6
 8004f46:	6060      	str	r0, [r4, #4]
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	6123      	str	r3, [r4, #16]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f52:	e7aa      	b.n	8004eaa <_printf_i+0x146>
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	4632      	mov	r2, r6
 8004f58:	4649      	mov	r1, r9
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	47d0      	blx	sl
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d0ad      	beq.n	8004ebe <_printf_i+0x15a>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	079b      	lsls	r3, r3, #30
 8004f66:	d413      	bmi.n	8004f90 <_printf_i+0x22c>
 8004f68:	68e0      	ldr	r0, [r4, #12]
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	4298      	cmp	r0, r3
 8004f6e:	bfb8      	it	lt
 8004f70:	4618      	movlt	r0, r3
 8004f72:	e7a6      	b.n	8004ec2 <_printf_i+0x15e>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4632      	mov	r2, r6
 8004f78:	4649      	mov	r1, r9
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	47d0      	blx	sl
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d09d      	beq.n	8004ebe <_printf_i+0x15a>
 8004f82:	3501      	adds	r5, #1
 8004f84:	68e3      	ldr	r3, [r4, #12]
 8004f86:	9903      	ldr	r1, [sp, #12]
 8004f88:	1a5b      	subs	r3, r3, r1
 8004f8a:	42ab      	cmp	r3, r5
 8004f8c:	dcf2      	bgt.n	8004f74 <_printf_i+0x210>
 8004f8e:	e7eb      	b.n	8004f68 <_printf_i+0x204>
 8004f90:	2500      	movs	r5, #0
 8004f92:	f104 0619 	add.w	r6, r4, #25
 8004f96:	e7f5      	b.n	8004f84 <_printf_i+0x220>
 8004f98:	0807ad10 	.word	0x0807ad10
 8004f9c:	0807ad21 	.word	0x0807ad21

08004fa0 <__swbuf_r>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	460e      	mov	r6, r1
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	4605      	mov	r5, r0
 8004fa8:	b118      	cbz	r0, 8004fb2 <__swbuf_r+0x12>
 8004faa:	6a03      	ldr	r3, [r0, #32]
 8004fac:	b90b      	cbnz	r3, 8004fb2 <__swbuf_r+0x12>
 8004fae:	f7ff fa3f 	bl	8004430 <__sinit>
 8004fb2:	69a3      	ldr	r3, [r4, #24]
 8004fb4:	60a3      	str	r3, [r4, #8]
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	071a      	lsls	r2, r3, #28
 8004fba:	d501      	bpl.n	8004fc0 <__swbuf_r+0x20>
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	b943      	cbnz	r3, 8004fd2 <__swbuf_r+0x32>
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 f82a 	bl	800501c <__swsetup_r>
 8004fc8:	b118      	cbz	r0, 8004fd2 <__swbuf_r+0x32>
 8004fca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004fce:	4638      	mov	r0, r7
 8004fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	6922      	ldr	r2, [r4, #16]
 8004fd6:	1a98      	subs	r0, r3, r2
 8004fd8:	6963      	ldr	r3, [r4, #20]
 8004fda:	b2f6      	uxtb	r6, r6
 8004fdc:	4283      	cmp	r3, r0
 8004fde:	4637      	mov	r7, r6
 8004fe0:	dc05      	bgt.n	8004fee <__swbuf_r+0x4e>
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f7ff fbdb 	bl	80047a0 <_fflush_r>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d1ed      	bne.n	8004fca <__swbuf_r+0x2a>
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	60a3      	str	r3, [r4, #8]
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	6022      	str	r2, [r4, #0]
 8004ffa:	701e      	strb	r6, [r3, #0]
 8004ffc:	6962      	ldr	r2, [r4, #20]
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	429a      	cmp	r2, r3
 8005002:	d004      	beq.n	800500e <__swbuf_r+0x6e>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	07db      	lsls	r3, r3, #31
 8005008:	d5e1      	bpl.n	8004fce <__swbuf_r+0x2e>
 800500a:	2e0a      	cmp	r6, #10
 800500c:	d1df      	bne.n	8004fce <__swbuf_r+0x2e>
 800500e:	4621      	mov	r1, r4
 8005010:	4628      	mov	r0, r5
 8005012:	f7ff fbc5 	bl	80047a0 <_fflush_r>
 8005016:	2800      	cmp	r0, #0
 8005018:	d0d9      	beq.n	8004fce <__swbuf_r+0x2e>
 800501a:	e7d6      	b.n	8004fca <__swbuf_r+0x2a>

0800501c <__swsetup_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4b29      	ldr	r3, [pc, #164]	@ (80050c4 <__swsetup_r+0xa8>)
 8005020:	4605      	mov	r5, r0
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	460c      	mov	r4, r1
 8005026:	b118      	cbz	r0, 8005030 <__swsetup_r+0x14>
 8005028:	6a03      	ldr	r3, [r0, #32]
 800502a:	b90b      	cbnz	r3, 8005030 <__swsetup_r+0x14>
 800502c:	f7ff fa00 	bl	8004430 <__sinit>
 8005030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005034:	0719      	lsls	r1, r3, #28
 8005036:	d422      	bmi.n	800507e <__swsetup_r+0x62>
 8005038:	06da      	lsls	r2, r3, #27
 800503a:	d407      	bmi.n	800504c <__swsetup_r+0x30>
 800503c:	2209      	movs	r2, #9
 800503e:	602a      	str	r2, [r5, #0]
 8005040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005044:	81a3      	strh	r3, [r4, #12]
 8005046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800504a:	e033      	b.n	80050b4 <__swsetup_r+0x98>
 800504c:	0758      	lsls	r0, r3, #29
 800504e:	d512      	bpl.n	8005076 <__swsetup_r+0x5a>
 8005050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005052:	b141      	cbz	r1, 8005066 <__swsetup_r+0x4a>
 8005054:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005058:	4299      	cmp	r1, r3
 800505a:	d002      	beq.n	8005062 <__swsetup_r+0x46>
 800505c:	4628      	mov	r0, r5
 800505e:	f7ff fc87 	bl	8004970 <_free_r>
 8005062:	2300      	movs	r3, #0
 8005064:	6363      	str	r3, [r4, #52]	@ 0x34
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	2300      	movs	r3, #0
 8005070:	6063      	str	r3, [r4, #4]
 8005072:	6923      	ldr	r3, [r4, #16]
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	f043 0308 	orr.w	r3, r3, #8
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	b94b      	cbnz	r3, 8005096 <__swsetup_r+0x7a>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508c:	d003      	beq.n	8005096 <__swsetup_r+0x7a>
 800508e:	4621      	mov	r1, r4
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f83f 	bl	8005114 <__smakebuf_r>
 8005096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509a:	f013 0201 	ands.w	r2, r3, #1
 800509e:	d00a      	beq.n	80050b6 <__swsetup_r+0x9a>
 80050a0:	2200      	movs	r2, #0
 80050a2:	60a2      	str	r2, [r4, #8]
 80050a4:	6962      	ldr	r2, [r4, #20]
 80050a6:	4252      	negs	r2, r2
 80050a8:	61a2      	str	r2, [r4, #24]
 80050aa:	6922      	ldr	r2, [r4, #16]
 80050ac:	b942      	cbnz	r2, 80050c0 <__swsetup_r+0xa4>
 80050ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050b2:	d1c5      	bne.n	8005040 <__swsetup_r+0x24>
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
 80050b6:	0799      	lsls	r1, r3, #30
 80050b8:	bf58      	it	pl
 80050ba:	6962      	ldrpl	r2, [r4, #20]
 80050bc:	60a2      	str	r2, [r4, #8]
 80050be:	e7f4      	b.n	80050aa <__swsetup_r+0x8e>
 80050c0:	2000      	movs	r0, #0
 80050c2:	e7f7      	b.n	80050b4 <__swsetup_r+0x98>
 80050c4:	2000001c 	.word	0x2000001c

080050c8 <__swhatbuf_r>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	460c      	mov	r4, r1
 80050cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d0:	2900      	cmp	r1, #0
 80050d2:	b096      	sub	sp, #88	@ 0x58
 80050d4:	4615      	mov	r5, r2
 80050d6:	461e      	mov	r6, r3
 80050d8:	da0d      	bge.n	80050f6 <__swhatbuf_r+0x2e>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	bf14      	ite	ne
 80050e6:	2340      	movne	r3, #64	@ 0x40
 80050e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050ec:	2000      	movs	r0, #0
 80050ee:	6031      	str	r1, [r6, #0]
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	b016      	add	sp, #88	@ 0x58
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
 80050f6:	466a      	mov	r2, sp
 80050f8:	f000 f89c 	bl	8005234 <_fstat_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	dbec      	blt.n	80050da <__swhatbuf_r+0x12>
 8005100:	9901      	ldr	r1, [sp, #4]
 8005102:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005106:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800510a:	4259      	negs	r1, r3
 800510c:	4159      	adcs	r1, r3
 800510e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005112:	e7eb      	b.n	80050ec <__swhatbuf_r+0x24>

08005114 <__smakebuf_r>:
 8005114:	898b      	ldrh	r3, [r1, #12]
 8005116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005118:	079d      	lsls	r5, r3, #30
 800511a:	4606      	mov	r6, r0
 800511c:	460c      	mov	r4, r1
 800511e:	d507      	bpl.n	8005130 <__smakebuf_r+0x1c>
 8005120:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	2301      	movs	r3, #1
 800512a:	6163      	str	r3, [r4, #20]
 800512c:	b003      	add	sp, #12
 800512e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005130:	ab01      	add	r3, sp, #4
 8005132:	466a      	mov	r2, sp
 8005134:	f7ff ffc8 	bl	80050c8 <__swhatbuf_r>
 8005138:	9f00      	ldr	r7, [sp, #0]
 800513a:	4605      	mov	r5, r0
 800513c:	4639      	mov	r1, r7
 800513e:	4630      	mov	r0, r6
 8005140:	f7ff fa2a 	bl	8004598 <_malloc_r>
 8005144:	b948      	cbnz	r0, 800515a <__smakebuf_r+0x46>
 8005146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800514a:	059a      	lsls	r2, r3, #22
 800514c:	d4ee      	bmi.n	800512c <__smakebuf_r+0x18>
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	f043 0302 	orr.w	r3, r3, #2
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	e7e2      	b.n	8005120 <__smakebuf_r+0xc>
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	6020      	str	r0, [r4, #0]
 800515e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800516a:	b15b      	cbz	r3, 8005184 <__smakebuf_r+0x70>
 800516c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005170:	4630      	mov	r0, r6
 8005172:	f000 f83b 	bl	80051ec <_isatty_r>
 8005176:	b128      	cbz	r0, 8005184 <__smakebuf_r+0x70>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	431d      	orrs	r5, r3
 8005188:	81a5      	strh	r5, [r4, #12]
 800518a:	e7cf      	b.n	800512c <__smakebuf_r+0x18>

0800518c <_raise_r>:
 800518c:	291f      	cmp	r1, #31
 800518e:	b538      	push	{r3, r4, r5, lr}
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	d904      	bls.n	80051a0 <_raise_r+0x14>
 8005196:	2316      	movs	r3, #22
 8005198:	6003      	str	r3, [r0, #0]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80051a2:	b112      	cbz	r2, 80051aa <_raise_r+0x1e>
 80051a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051a8:	b94b      	cbnz	r3, 80051be <_raise_r+0x32>
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 f840 	bl	8005230 <_getpid_r>
 80051b0:	4622      	mov	r2, r4
 80051b2:	4601      	mov	r1, r0
 80051b4:	4628      	mov	r0, r5
 80051b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ba:	f000 b827 	b.w	800520c <_kill_r>
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d00a      	beq.n	80051d8 <_raise_r+0x4c>
 80051c2:	1c59      	adds	r1, r3, #1
 80051c4:	d103      	bne.n	80051ce <_raise_r+0x42>
 80051c6:	2316      	movs	r3, #22
 80051c8:	6003      	str	r3, [r0, #0]
 80051ca:	2001      	movs	r0, #1
 80051cc:	e7e7      	b.n	800519e <_raise_r+0x12>
 80051ce:	2100      	movs	r1, #0
 80051d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80051d4:	4620      	mov	r0, r4
 80051d6:	4798      	blx	r3
 80051d8:	2000      	movs	r0, #0
 80051da:	e7e0      	b.n	800519e <_raise_r+0x12>

080051dc <raise>:
 80051dc:	4b02      	ldr	r3, [pc, #8]	@ (80051e8 <raise+0xc>)
 80051de:	4601      	mov	r1, r0
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	f7ff bfd3 	b.w	800518c <_raise_r>
 80051e6:	bf00      	nop
 80051e8:	2000001c 	.word	0x2000001c

080051ec <_isatty_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	@ (8005208 <_isatty_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fc fecb 	bl	8001f92 <_isatty>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_isatty_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_isatty_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000310 	.word	0x20000310

0800520c <_kill_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	@ (800522c <_kill_r+0x20>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	f7fc fe4a 	bl	8001eb2 <_kill>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d102      	bne.n	8005228 <_kill_r+0x1c>
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	b103      	cbz	r3, 8005228 <_kill_r+0x1c>
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	20000310 	.word	0x20000310

08005230 <_getpid_r>:
 8005230:	f7fc be37 	b.w	8001ea2 <_getpid>

08005234 <_fstat_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d07      	ldr	r5, [pc, #28]	@ (8005254 <_fstat_r+0x20>)
 8005238:	2300      	movs	r3, #0
 800523a:	4604      	mov	r4, r0
 800523c:	4608      	mov	r0, r1
 800523e:	4611      	mov	r1, r2
 8005240:	602b      	str	r3, [r5, #0]
 8005242:	f7fc fe96 	bl	8001f72 <_fstat>
 8005246:	1c43      	adds	r3, r0, #1
 8005248:	d102      	bne.n	8005250 <_fstat_r+0x1c>
 800524a:	682b      	ldr	r3, [r5, #0]
 800524c:	b103      	cbz	r3, 8005250 <_fstat_r+0x1c>
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	bd38      	pop	{r3, r4, r5, pc}
 8005252:	bf00      	nop
 8005254:	20000310 	.word	0x20000310

08005258 <fmod>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	ed2d 8b02 	vpush	{d8}
 800525e:	ec57 6b10 	vmov	r6, r7, d0
 8005262:	ec55 4b11 	vmov	r4, r5, d1
 8005266:	f000 f825 	bl	80052b4 <__ieee754_fmod>
 800526a:	4622      	mov	r2, r4
 800526c:	462b      	mov	r3, r5
 800526e:	4630      	mov	r0, r6
 8005270:	4639      	mov	r1, r7
 8005272:	eeb0 8a40 	vmov.f32	s16, s0
 8005276:	eef0 8a60 	vmov.f32	s17, s1
 800527a:	f7fb fc57 	bl	8000b2c <__aeabi_dcmpun>
 800527e:	b990      	cbnz	r0, 80052a6 <fmod+0x4e>
 8005280:	2200      	movs	r2, #0
 8005282:	2300      	movs	r3, #0
 8005284:	4620      	mov	r0, r4
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800528c:	b158      	cbz	r0, 80052a6 <fmod+0x4e>
 800528e:	f7ff f90d 	bl	80044ac <__errno>
 8005292:	2321      	movs	r3, #33	@ 0x21
 8005294:	6003      	str	r3, [r0, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	2300      	movs	r3, #0
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	f7fb fad5 	bl	800084c <__aeabi_ddiv>
 80052a2:	ec41 0b18 	vmov	d8, r0, r1
 80052a6:	eeb0 0a48 	vmov.f32	s0, s16
 80052aa:	eef0 0a68 	vmov.f32	s1, s17
 80052ae:	ecbd 8b02 	vpop	{d8}
 80052b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052b4 <__ieee754_fmod>:
 80052b4:	ec53 2b11 	vmov	r2, r3, d1
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 80052c0:	ea52 0408 	orrs.w	r4, r2, r8
 80052c4:	ec51 0b10 	vmov	r0, r1, d0
 80052c8:	461e      	mov	r6, r3
 80052ca:	4696      	mov	lr, r2
 80052cc:	4694      	mov	ip, r2
 80052ce:	d00c      	beq.n	80052ea <__ieee754_fmod+0x36>
 80052d0:	4d76      	ldr	r5, [pc, #472]	@ (80054ac <__ieee754_fmod+0x1f8>)
 80052d2:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 80052d6:	45a9      	cmp	r9, r5
 80052d8:	460c      	mov	r4, r1
 80052da:	d806      	bhi.n	80052ea <__ieee754_fmod+0x36>
 80052dc:	4255      	negs	r5, r2
 80052de:	4f74      	ldr	r7, [pc, #464]	@ (80054b0 <__ieee754_fmod+0x1fc>)
 80052e0:	4315      	orrs	r5, r2
 80052e2:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 80052e6:	42bd      	cmp	r5, r7
 80052e8:	d909      	bls.n	80052fe <__ieee754_fmod+0x4a>
 80052ea:	f7fb f985 	bl	80005f8 <__aeabi_dmul>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	f7fb faab 	bl	800084c <__aeabi_ddiv>
 80052f6:	ec41 0b10 	vmov	d0, r0, r1
 80052fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fe:	45c1      	cmp	r9, r8
 8005300:	4682      	mov	sl, r0
 8005302:	4607      	mov	r7, r0
 8005304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005308:	dc09      	bgt.n	800531e <__ieee754_fmod+0x6a>
 800530a:	dbf4      	blt.n	80052f6 <__ieee754_fmod+0x42>
 800530c:	4282      	cmp	r2, r0
 800530e:	d8f2      	bhi.n	80052f6 <__ieee754_fmod+0x42>
 8005310:	d105      	bne.n	800531e <__ieee754_fmod+0x6a>
 8005312:	4b68      	ldr	r3, [pc, #416]	@ (80054b4 <__ieee754_fmod+0x200>)
 8005314:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8005318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800531c:	e7eb      	b.n	80052f6 <__ieee754_fmod+0x42>
 800531e:	4964      	ldr	r1, [pc, #400]	@ (80054b0 <__ieee754_fmod+0x1fc>)
 8005320:	420c      	tst	r4, r1
 8005322:	d148      	bne.n	80053b6 <__ieee754_fmod+0x102>
 8005324:	f1b9 0f00 	cmp.w	r9, #0
 8005328:	d13d      	bne.n	80053a6 <__ieee754_fmod+0xf2>
 800532a:	4a63      	ldr	r2, [pc, #396]	@ (80054b8 <__ieee754_fmod+0x204>)
 800532c:	4653      	mov	r3, sl
 800532e:	2b00      	cmp	r3, #0
 8005330:	dc36      	bgt.n	80053a0 <__ieee754_fmod+0xec>
 8005332:	420e      	tst	r6, r1
 8005334:	d14f      	bne.n	80053d6 <__ieee754_fmod+0x122>
 8005336:	f1b8 0f00 	cmp.w	r8, #0
 800533a:	d144      	bne.n	80053c6 <__ieee754_fmod+0x112>
 800533c:	4b5e      	ldr	r3, [pc, #376]	@ (80054b8 <__ieee754_fmod+0x204>)
 800533e:	4671      	mov	r1, lr
 8005340:	2900      	cmp	r1, #0
 8005342:	dc3d      	bgt.n	80053c0 <__ieee754_fmod+0x10c>
 8005344:	485d      	ldr	r0, [pc, #372]	@ (80054bc <__ieee754_fmod+0x208>)
 8005346:	4282      	cmp	r2, r0
 8005348:	db4a      	blt.n	80053e0 <__ieee754_fmod+0x12c>
 800534a:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800534e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005352:	485a      	ldr	r0, [pc, #360]	@ (80054bc <__ieee754_fmod+0x208>)
 8005354:	4283      	cmp	r3, r0
 8005356:	db57      	blt.n	8005408 <__ieee754_fmod+0x154>
 8005358:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800535c:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8005360:	1ad0      	subs	r0, r2, r3
 8005362:	1b8a      	subs	r2, r1, r6
 8005364:	eba7 040c 	sub.w	r4, r7, ip
 8005368:	2800      	cmp	r0, #0
 800536a:	d162      	bne.n	8005432 <__ieee754_fmod+0x17e>
 800536c:	4567      	cmp	r7, ip
 800536e:	bf38      	it	cc
 8005370:	f102 32ff 	addcc.w	r2, r2, #4294967295	@ 0xffffffff
 8005374:	2a00      	cmp	r2, #0
 8005376:	bfbc      	itt	lt
 8005378:	463c      	movlt	r4, r7
 800537a:	460a      	movlt	r2, r1
 800537c:	ea52 0104 	orrs.w	r1, r2, r4
 8005380:	d0c7      	beq.n	8005312 <__ieee754_fmod+0x5e>
 8005382:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8005386:	db69      	blt.n	800545c <__ieee754_fmod+0x1a8>
 8005388:	494c      	ldr	r1, [pc, #304]	@ (80054bc <__ieee754_fmod+0x208>)
 800538a:	428b      	cmp	r3, r1
 800538c:	db6c      	blt.n	8005468 <__ieee754_fmod+0x1b4>
 800538e:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8005392:	432a      	orrs	r2, r5
 8005394:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8005398:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800539c:	4620      	mov	r0, r4
 800539e:	e7aa      	b.n	80052f6 <__ieee754_fmod+0x42>
 80053a0:	3a01      	subs	r2, #1
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	e7c3      	b.n	800532e <__ieee754_fmod+0x7a>
 80053a6:	4a45      	ldr	r2, [pc, #276]	@ (80054bc <__ieee754_fmod+0x208>)
 80053a8:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	ddc0      	ble.n	8005332 <__ieee754_fmod+0x7e>
 80053b0:	3a01      	subs	r2, #1
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	e7fa      	b.n	80053ac <__ieee754_fmod+0xf8>
 80053b6:	ea4f 5229 	mov.w	r2, r9, asr #20
 80053ba:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80053be:	e7b8      	b.n	8005332 <__ieee754_fmod+0x7e>
 80053c0:	3b01      	subs	r3, #1
 80053c2:	0049      	lsls	r1, r1, #1
 80053c4:	e7bc      	b.n	8005340 <__ieee754_fmod+0x8c>
 80053c6:	4b3d      	ldr	r3, [pc, #244]	@ (80054bc <__ieee754_fmod+0x208>)
 80053c8:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80053cc:	2900      	cmp	r1, #0
 80053ce:	ddb9      	ble.n	8005344 <__ieee754_fmod+0x90>
 80053d0:	3b01      	subs	r3, #1
 80053d2:	0049      	lsls	r1, r1, #1
 80053d4:	e7fa      	b.n	80053cc <__ieee754_fmod+0x118>
 80053d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80053da:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80053de:	e7b1      	b.n	8005344 <__ieee754_fmod+0x90>
 80053e0:	1a80      	subs	r0, r0, r2
 80053e2:	281f      	cmp	r0, #31
 80053e4:	dc0a      	bgt.n	80053fc <__ieee754_fmod+0x148>
 80053e6:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 80053ea:	fa09 f900 	lsl.w	r9, r9, r0
 80053ee:	fa2a f101 	lsr.w	r1, sl, r1
 80053f2:	ea41 0109 	orr.w	r1, r1, r9
 80053f6:	fa0a f700 	lsl.w	r7, sl, r0
 80053fa:	e7aa      	b.n	8005352 <__ieee754_fmod+0x9e>
 80053fc:	4930      	ldr	r1, [pc, #192]	@ (80054c0 <__ieee754_fmod+0x20c>)
 80053fe:	1a89      	subs	r1, r1, r2
 8005400:	fa0a f101 	lsl.w	r1, sl, r1
 8005404:	2700      	movs	r7, #0
 8005406:	e7a4      	b.n	8005352 <__ieee754_fmod+0x9e>
 8005408:	1ac0      	subs	r0, r0, r3
 800540a:	281f      	cmp	r0, #31
 800540c:	dc0a      	bgt.n	8005424 <__ieee754_fmod+0x170>
 800540e:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 8005412:	fa08 f800 	lsl.w	r8, r8, r0
 8005416:	fa2e f606 	lsr.w	r6, lr, r6
 800541a:	ea46 0608 	orr.w	r6, r6, r8
 800541e:	fa0e fc00 	lsl.w	ip, lr, r0
 8005422:	e79d      	b.n	8005360 <__ieee754_fmod+0xac>
 8005424:	4e26      	ldr	r6, [pc, #152]	@ (80054c0 <__ieee754_fmod+0x20c>)
 8005426:	1af6      	subs	r6, r6, r3
 8005428:	fa0e f606 	lsl.w	r6, lr, r6
 800542c:	f04f 0c00 	mov.w	ip, #0
 8005430:	e796      	b.n	8005360 <__ieee754_fmod+0xac>
 8005432:	4567      	cmp	r7, ip
 8005434:	bf38      	it	cc
 8005436:	f102 32ff 	addcc.w	r2, r2, #4294967295	@ 0xffffffff
 800543a:	2a00      	cmp	r2, #0
 800543c:	da05      	bge.n	800544a <__ieee754_fmod+0x196>
 800543e:	0ffa      	lsrs	r2, r7, #31
 8005440:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005444:	007f      	lsls	r7, r7, #1
 8005446:	3801      	subs	r0, #1
 8005448:	e78b      	b.n	8005362 <__ieee754_fmod+0xae>
 800544a:	ea52 0104 	orrs.w	r1, r2, r4
 800544e:	f43f af60 	beq.w	8005312 <__ieee754_fmod+0x5e>
 8005452:	0fe1      	lsrs	r1, r4, #31
 8005454:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005458:	0067      	lsls	r7, r4, #1
 800545a:	e7f4      	b.n	8005446 <__ieee754_fmod+0x192>
 800545c:	0fe1      	lsrs	r1, r4, #31
 800545e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005462:	0064      	lsls	r4, r4, #1
 8005464:	3b01      	subs	r3, #1
 8005466:	e78c      	b.n	8005382 <__ieee754_fmod+0xce>
 8005468:	1ac9      	subs	r1, r1, r3
 800546a:	2914      	cmp	r1, #20
 800546c:	dc0a      	bgt.n	8005484 <__ieee754_fmod+0x1d0>
 800546e:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	40cc      	lsrs	r4, r1
 8005478:	4323      	orrs	r3, r4
 800547a:	410a      	asrs	r2, r1
 800547c:	ea42 0105 	orr.w	r1, r2, r5
 8005480:	4618      	mov	r0, r3
 8005482:	e738      	b.n	80052f6 <__ieee754_fmod+0x42>
 8005484:	291f      	cmp	r1, #31
 8005486:	dc07      	bgt.n	8005498 <__ieee754_fmod+0x1e4>
 8005488:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800548c:	40cc      	lsrs	r4, r1
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	4323      	orrs	r3, r4
 8005494:	462a      	mov	r2, r5
 8005496:	e7f1      	b.n	800547c <__ieee754_fmod+0x1c8>
 8005498:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800549c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80054a0:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 80054a4:	33e2      	adds	r3, #226	@ 0xe2
 80054a6:	fa42 f303 	asr.w	r3, r2, r3
 80054aa:	e7f3      	b.n	8005494 <__ieee754_fmod+0x1e0>
 80054ac:	7fefffff 	.word	0x7fefffff
 80054b0:	7ff00000 	.word	0x7ff00000
 80054b4:	0807ad38 	.word	0x0807ad38
 80054b8:	fffffbed 	.word	0xfffffbed
 80054bc:	fffffc02 	.word	0xfffffc02
 80054c0:	fffffbe2 	.word	0xfffffbe2

080054c4 <_init>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr

080054d0 <_fini>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr
